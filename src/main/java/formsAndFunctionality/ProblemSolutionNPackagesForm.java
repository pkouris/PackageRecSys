package formsAndFunctionality;

import entityBasicClasses.ItemForPackage;
import static fileManagerClasses.ReadFiles.movies_hashTable;
import static formsAndFunctionality.ProblemModelingForm.vertexTopCategory_list;
import java.awt.Component;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import linearProgrammingClasses.LinearProgramming;
import linearProgrammingClasses.SolutionType;
import static formsAndFunctionality.ProblemModelingForm.vertexItemOfTopCategories_list;

/**
 * @author: Panagiotis Kouris
 * date: Nov 2015 
 */
public class ProblemSolutionNPackagesForm extends javax.swing.JFrame {

    SolutionType solutionOfProblem = new SolutionType();
    long overallRunningTime = 0;
    
    //HashTable with number of package and the list of movies
    static public Hashtable<Integer, Hashtable<String, List<ItemForPackage>>> packages_hashTable = new Hashtable<>();

    /**
     * Creates new form MinCostFlowForm
     */
    public ProblemSolutionNPackagesForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tb_2 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        tx1 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        tx_modelOfCreatingPackages = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tx_averageRating = new javax.swing.JTextField();
        tx_overallRating = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tb_statistics = new javax.swing.JTable();
        tx_runningTime = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        tx_selectedUser = new javax.swing.JTextField();
        tx_itemsPerCategory = new javax.swing.JTextField();
        tx_numOfPackages = new javax.swing.JTextField();
        tx_numOfCategories = new javax.swing.JTextField();
        tx_maxAppearances = new javax.swing.JTextField();
        bt_back = new javax.swing.JButton();
        bt_back1 = new javax.swing.JButton();
        bt_evaluation = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menu_back = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menu_exit = new javax.swing.JMenuItem();
        menu_about = new javax.swing.JMenu();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PackageRecSys");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("General Solution (value of all Variables)"));

        tb_2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Edge (Variable)", "Flow", "Cost/ Unit of Flow"
            }
        ));
        jScrollPane4.setViewportView(tb_2);
        if (tb_2.getColumnModel().getColumnCount() > 0) {
            tb_2.getColumnModel().getColumn(0).setMinWidth(40);
            tb_2.getColumnModel().getColumn(0).setPreferredWidth(40);
            tb_2.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Solution"));

        tx1.setEditable(false);
        tx1.setBackground(new java.awt.Color(204, 204, 255));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Packages Of Recommendations"));

        tb_1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "no", "Category", "ItemId", "Title", "Rating"
            }
        ));
        jScrollPane1.setViewportView(tb_1);
        if (tb_1.getColumnModel().getColumnCount() > 0) {
            tb_1.getColumnModel().getColumn(0).setMinWidth(35);
            tb_1.getColumnModel().getColumn(0).setPreferredWidth(35);
            tb_1.getColumnModel().getColumn(0).setMaxWidth(35);
            tb_1.getColumnModel().getColumn(1).setMinWidth(75);
            tb_1.getColumnModel().getColumn(1).setPreferredWidth(75);
            tb_1.getColumnModel().getColumn(1).setMaxWidth(75);
            tb_1.getColumnModel().getColumn(2).setMinWidth(75);
            tb_1.getColumnModel().getColumn(2).setPreferredWidth(75);
            tb_1.getColumnModel().getColumn(2).setMaxWidth(75);
            tb_1.getColumnModel().getColumn(3).setMinWidth(320);
            tb_1.getColumnModel().getColumn(3).setPreferredWidth(320);
            tb_1.getColumnModel().getColumn(3).setMaxWidth(320);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 741, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 17, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel2.setText("Model of Creating Packages:");

        tx_modelOfCreatingPackages.setEditable(false);
        tx_modelOfCreatingPackages.setBackground(new java.awt.Color(204, 204, 255));

        jLabel3.setText("Overall Rating:");

        jLabel4.setText("Average Rating:");

        tx_averageRating.setEditable(false);
        tx_averageRating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_averageRatingActionPerformed(evt);
            }
        });

        tx_overallRating.setEditable(false);
        tx_overallRating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_overallRatingActionPerformed(evt);
            }
        });

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tx_modelOfCreatingPackages))
                            .addComponent(tx1, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tx_overallRating))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tx_averageRating, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(53, 53, 53))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(tx1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tx_modelOfCreatingPackages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tx_overallRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tx_averageRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Statistics per Cycle of Algorithm"));

        tb_statistics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cycle", "Nodes", "Edges", "Item Nodes", "Category Nodes", "Running Time (ms)"
            }
        ));
        jScrollPane6.setViewportView(tb_statistics);
        if (tb_statistics.getColumnModel().getColumnCount() > 0) {
            tb_statistics.getColumnModel().getColumn(0).setMinWidth(70);
            tb_statistics.getColumnModel().getColumn(0).setPreferredWidth(70);
            tb_statistics.getColumnModel().getColumn(0).setMaxWidth(70);
            tb_statistics.getColumnModel().getColumn(1).setMinWidth(60);
            tb_statistics.getColumnModel().getColumn(1).setPreferredWidth(60);
            tb_statistics.getColumnModel().getColumn(1).setMaxWidth(60);
            tb_statistics.getColumnModel().getColumn(2).setMinWidth(60);
            tb_statistics.getColumnModel().getColumn(2).setPreferredWidth(60);
            tb_statistics.getColumnModel().getColumn(2).setMaxWidth(60);
            tb_statistics.getColumnModel().getColumn(3).setMinWidth(100);
            tb_statistics.getColumnModel().getColumn(3).setPreferredWidth(100);
            tb_statistics.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        tx_runningTime.setEditable(false);

        jLabel1.setText("Overall Running Time:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tx_runningTime, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tx_runningTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));

        tx_selectedUser.setEditable(false);
        tx_selectedUser.setBackground(new java.awt.Color(204, 204, 255));
        tx_selectedUser.setText("Selected UserID: ");

        tx_itemsPerCategory.setEditable(false);
        tx_itemsPerCategory.setBackground(new java.awt.Color(204, 204, 255));
        tx_itemsPerCategory.setText("Items per Category: (ni/c)");
        tx_itemsPerCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_itemsPerCategoryActionPerformed(evt);
            }
        });

        tx_numOfPackages.setBackground(new java.awt.Color(204, 204, 255));
        tx_numOfPackages.setText("Number of Packages (N):");
        tx_numOfPackages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_numOfPackagesActionPerformed(evt);
            }
        });

        tx_numOfCategories.setBackground(new java.awt.Color(204, 204, 255));
        tx_numOfCategories.setText("Number of Categories (nc):");
        tx_numOfCategories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_numOfCategoriesActionPerformed(evt);
            }
        });

        tx_maxAppearances.setEditable(false);
        tx_maxAppearances.setBackground(new java.awt.Color(204, 204, 255));
        tx_maxAppearances.setText("Maximum Appearances/Item:");
        tx_maxAppearances.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_maxAppearancesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tx_numOfPackages)
                    .addComponent(tx_selectedUser)
                    .addComponent(tx_numOfCategories)
                    .addComponent(tx_itemsPerCategory)
                    .addComponent(tx_maxAppearances))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tx_selectedUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tx_numOfPackages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tx_numOfCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tx_itemsPerCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tx_maxAppearances, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bt_back.setText("Back");
        bt_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_backActionPerformed(evt);
            }
        });

        bt_back1.setText("Back");
        bt_back1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_back1ActionPerformed(evt);
            }
        });

        bt_evaluation.setText("Evaluation");
        bt_evaluation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_evaluationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(bt_back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bt_back1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_evaluation, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 893, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_back)
                    .addComponent(bt_back1)
                    .addComponent(bt_evaluation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        jScrollPane5.setViewportView(jPanel5);

        jMenu1.setText("File");

        menu_back.setText("Back");
        menu_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_backActionPerformed(evt);
            }
        });
        jMenu1.add(menu_back);
        jMenu1.add(jSeparator1);

        menu_exit.setText("Exit");
        menu_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_exitActionPerformed(evt);
            }
        });
        jMenu1.add(menu_exit);

        jMenuBar1.add(jMenu1);

        menu_about.setText("About");
        menu_about.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_aboutMouseClicked(evt);
            }
        });
        jMenuBar1.add(menu_about);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 930, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        windowOpeningAciton();
    }//GEN-LAST:event_formWindowOpened

    private void tx_numOfPackagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_numOfPackagesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_numOfPackagesActionPerformed

    private void tx_numOfCategoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_numOfCategoriesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_numOfCategoriesActionPerformed

    private void tx_itemsPerCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_itemsPerCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_itemsPerCategoryActionPerformed

    private void tx_maxAppearancesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_maxAppearancesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_maxAppearancesActionPerformed

    private void menu_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_backActionPerformed
        ProblemModelingForm a = new ProblemModelingForm();
        this.dispose();
        a.setVisible(true);
    }//GEN-LAST:event_menu_backActionPerformed

    private void tx_overallRatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_overallRatingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_overallRatingActionPerformed

    private void bt_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_backActionPerformed
       ProblemModelingForm a = new ProblemModelingForm();
        this.dispose();
        a.setVisible(true);
    }//GEN-LAST:event_bt_backActionPerformed

    private void bt_back1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_back1ActionPerformed
        ProblemModelingForm a = new ProblemModelingForm();
        this.dispose();
        a.setVisible(true);
    }//GEN-LAST:event_bt_back1ActionPerformed

    private void bt_evaluationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_evaluationActionPerformed
        EvaluationMeasuresForm a = new EvaluationMeasuresForm();
        this.dispose();
        a.setVisible(true);
    }//GEN-LAST:event_bt_evaluationActionPerformed

    private void tx_averageRatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_averageRatingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_averageRatingActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       printResultsToFile();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void menu_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_exitActionPerformed
        Object[] options = {"Yes", "Cancel"};
        Component frame = null;
        int n = JOptionPane.showOptionDialog(frame,
            "Are you sure you want to terminate the program?",
            "Exit",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
            null, options, options[0]);
        if (n == 0) {
            System.exit(0);
            //this.dispose();
        }
    }//GEN-LAST:event_menu_exitActionPerformed

    private void menu_aboutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_aboutMouseClicked
        Component frame = null;
        JOptionPane.showMessageDialog(frame, "PackageRecSys v1.0\nCopyright © Panagiotis Kouris, 2017\nNTUA and HUA\nAll rights reserved", "About Software", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menu_aboutMouseClicked

    
    public void windowOpeningAciton() {
        try {
            this.tx_selectedUser.setText("Selected UserID: " + String.valueOf(StartForm.selectedUserID));
            switch (ProblemModelingForm.modelOfCreatingPackages) {
                case 1:
                    this.tx_modelOfCreatingPackages.setText("1. Removing the Edge with Maximum Rating");
                    break;
                case 2:
                    this.tx_modelOfCreatingPackages.setText("2. Removing the Edge with Minimum Rating");
                    break;
                case 3:
                    this.tx_modelOfCreatingPackages.setText("3. Removing the 50% of Edges with Upper Ratings");
                    break;
                case 4:
                    this.tx_modelOfCreatingPackages.setText("4. Removing the 50% of Edges with Lower Ratings");
                    break;
                case 5:
                    this.tx_modelOfCreatingPackages.setText("5. Removing the 100% of the Edges");
                    break;
                case 6:
                    this.tx_modelOfCreatingPackages.setText("6. Distinct Packages - Removing Movie Nodes");
                    break;
                case 7:
                    this.tx_modelOfCreatingPackages.setText("7. Maximum Number of Items Appearances");
                    break;
                default:
                    this.tx_modelOfCreatingPackages.setText("1. Removing the Edge with Maximum Rating");
                    break;
            }
            if (ProblemModelingForm.numOfItemsPerCategory == 0) {
                this.tx_itemsPerCategory.setText(
                        "Items per Category (ni/c): Proportional");
            } else {
                this.tx_itemsPerCategory.setText(
                        "Items per Category (ni/c): " + String.valueOf(ProblemModelingForm.numOfItemsPerCategory));
            }
            switch (ProblemModelingForm.numOfMaxAppearancesPerItem) {
                case -1:
                    this.tx_maxAppearances.setText(
                            "Maximum Appearances/Item: Not taken account");
                    break;
                case 0:
                    this.tx_maxAppearances.setText(
                            "Maximum Appearances/Item: From file");
                    break;
                default:
                    this.tx_maxAppearances.setText(
                            "Maximum Appearances/Item: " + ProblemModelingForm.numOfMaxAppearancesPerItem);
                    break;
            }
            createPackages();
            printSolution();
            this.tx_numOfPackages.setText(
                    "Number of Packages (N): " + String.valueOf(ProblemModelingForm.numOfPackages));
            this.tx_numOfCategories.setText(
                    "Number of Categories (nc): " + String.valueOf(ProblemModelingForm.numOfTopCategories));

        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: windowOpeningAciton() " + e, "Message", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
            return;
        }
    }


    
    //running Min Cost Flow algorithm by using the CPLEX linear programming system
    //it returns 1 on succeed or 0 on failure (no feasible solution)
    public int runMinCostFlow(int packageNumber, int numOfCategories) {
        try {
            LinearProgramming linearProgramming = new LinearProgramming();
            solutionOfProblem = null;
            long startTime = System.currentTimeMillis();
            solutionOfProblem = linearProgramming.linearProgrammingCalc(); //run min cost flow problem
            long runningTime = System.currentTimeMillis() - startTime;
            if (solutionOfProblem == null && packageNumber == 0) {
                this.overallRunningTime += runningTime;
                tx1.setText("No feasible solution!");
                return 0;
            } else if (solutionOfProblem == null && packageNumber > 0) {
                if (packageNumber == 1) { //the package is one
                    tx1.setText("Optimal Solution Found for the best " + packageNumber + " package!");
                } else { //the packages are more one
                    tx1.setText("Optimal Solution Found for the best " + packageNumber + " packages!");
                }
                return 0;
            } else if (packageNumber == 0) {
                this.overallRunningTime += runningTime;
                printStatisticsAndSolution(packageNumber, numOfCategories, runningTime);
                tx1.setText("Optimal Solution Found!");
            } else {
                this.overallRunningTime += runningTime;
                printStatisticsAndSolution(packageNumber, numOfCategories, runningTime);
            }
            return 1;
        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: runMinCostFlowCPLEX() " + e, "Message", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
            return 0;
        }
    }


    //remove one item node from the graph
    public void removeOneItemNodeOfGraph(int movieID) {
        int sizeOfMovieList = vertexItemOfTopCategories_list.size();
        int sizeOfCategoryList = vertexTopCategory_list.size();
        //remove edge from movie node
        for (int i = 0; i < sizeOfMovieList; i++) {
            if (movieID == vertexItemOfTopCategories_list.get(i).getItemID()) {
                // if (vertexMovieOfTopCategories_list.get(i).getMovieID() == moviesForRemovingEdges_list.get(r).getMovieID()) {
                vertexItemOfTopCategories_list.remove(i);
                /////////////////////////////
                //System.out.println("remove movie node: " + moviesForRemovingEdges_list.get(r).getMovieID());
                /////////////
                break;
            }
        }
        // remove category Edges
        for (int i = 0; i < sizeOfCategoryList; i++) {
            int len = vertexTopCategory_list.get(i).getEdgeMovieCategory_list().size();
            for (int e = 0; e < len; e++) {
                if (movieID == vertexTopCategory_list.get(i).getEdgeMovieCategory_list().get(e).getItemID()) {
                    vertexTopCategory_list.get(i).getEdgeMovieCategory_list().remove(e);
                    /////////////////////////////
                    //System.out.println("remove category edge for movieID: " + moviesForRemovingEdges_list.get(r).getMovieID());
                    /////////////
                    break;
                }
            }
        }
    }

    
    

    //it removes one endge of the graph
      public void removeOneEdgeOfGraph(int movieID, String category) {
        //remove edge from movie node
        int sizeOfMovieList = vertexItemOfTopCategories_list.size();
        for (int i = 0; i < sizeOfMovieList; i++) {
            if (movieID == vertexItemOfTopCategories_list.get(i).getItemID()) {
                int len = vertexItemOfTopCategories_list.get(i).getEdgeItemCategory_list().size();
                for(int j=0; j<len; j++){ //it finds the endge with movieID to remove it
                    if(category.equals(vertexItemOfTopCategories_list.get(i).getEdgeItemCategory_list().get(j).getCategoryID())){ //it does not add the edge with this categoryID
                       vertexItemOfTopCategories_list.get(i).getEdgeItemCategory_list().remove(j);
                       break;
                    }
                }
            }
            break;
        }
        //remove edge from category node
        int sizeOfCategoryList = vertexTopCategory_list.size();
        for (int i = 0; i < sizeOfCategoryList; i++) {
            if (category.equals(vertexTopCategory_list.get(i).getCategoryID())) {
                int len = vertexTopCategory_list.get(i).getEdgeMovieCategory_list().size();
                for(int j=0; j<len; j++){ //it finds the ende with movieID to remove it
                    if(movieID == vertexTopCategory_list.get(i).getEdgeMovieCategory_list().get(j).getItemID()){ //it does not add the edge with this movieID
                       vertexTopCategory_list.get(i).getEdgeMovieCategory_list().remove(j);
                        break;
                    }
                }
              
            }
        }  
    }
    
    
    
    //remove edges from the graph in order to re-run the algorithm
    //modelOfPackage = 3: remove the 50% of Edges with upper ratings
    //modelOfPackage = 4: remove the 50% of Edges with lower ratings
    //modelOfPackage = 5: remove all (100%) the Edges
    //modelOfPackage = 6: remove all movie nodes in order to produce distinct packages
    public void removeEdgesOrNodes(int modelOfPackage, List<ItemForPackage> moviesForRemovingEdges_list) {
        if (moviesForRemovingEdges_list.isEmpty()) {
            return;
        }
        if (modelOfPackage == 3) { //modelOfPackage == 3: remove the 50% of Edges with upper ratings
            //sorting moviesForRemovingEdges_list based on rating. Descent sorting               
            Collections.sort(moviesForRemovingEdges_list, new Comparator<ItemForPackage>() {
                public int compare(ItemForPackage mfp1, ItemForPackage mfp2) {
                    return (int) (mfp2.getRating()*100000.0 - mfp1.getRating()*100000.0);
                }
            });
            int numOfRemovingEdges = (int) round(((double) moviesForRemovingEdges_list.size() / 2.0), 0);
            for (int r = 0; r < numOfRemovingEdges; r++) {
                removeOneEdgeOfGraph(
                        moviesForRemovingEdges_list.get(r).getItemID(),
                        moviesForRemovingEdges_list.get(r).getCategory());
            }
        } else if (modelOfPackage == 4) { //modelOfPackage == 4: remove the 50% of Edges with lower rating
            //sorting moviesForRemovingEdges_list based on rating. Ascent sorting               
            Collections.sort(moviesForRemovingEdges_list, new Comparator<ItemForPackage>() {
                @Override
                public int compare(ItemForPackage mfp1, ItemForPackage mfp2) {
                    return (int) (mfp1.getRating()*100000.0 - mfp2.getRating()*100000.0);
                }
            });
            int numOfRemovingEdges = (int) round(((double) moviesForRemovingEdges_list.size() / 2.0), 0);
            for (int r = 0; r < numOfRemovingEdges; r++) {
                removeOneEdgeOfGraph(
                        moviesForRemovingEdges_list.get(r).getItemID(),
                        moviesForRemovingEdges_list.get(r).getCategory());
            }
        } else if (modelOfPackage == 5) { //modelOfPackage = 5: remove all (100%) the Edges
            int numOfRemovingEdges = moviesForRemovingEdges_list.size();
            for (int r = 0; r < numOfRemovingEdges; r++) {
                removeOneEdgeOfGraph(
                        moviesForRemovingEdges_list.get(r).getItemID(),
                        moviesForRemovingEdges_list.get(r).getCategory());
            }
        } else if (modelOfPackage == 6) { //modelOfPackage = 6: remove all movie nodes in order to produce distinct packages
            //int sizeOfMovieList = vertexMovieOfTopCategories_list.size();
            //int sizeOfCategoryList = vertexTopCategory_list.size();
            int numOfRemovingEdges = moviesForRemovingEdges_list.size();
            /////////////////////////////
            //System.out.println("len: " + numOfRemovingEdges);
            ///////////////////
            for (int r = 0; r < numOfRemovingEdges; r++) {
                //remove movie nodes
                removeOneItemNodeOfGraph(moviesForRemovingEdges_list.get(r).getItemID());
                
            }//close --> for (int r = 0; r < numOfRemovingEdges; r++)
        }//close --> else if (modelOfPackage == 6)
        else if (modelOfPackage == 7) { //modelOfPackage = 7: Each node has a number of max appearances
           
        }//close --> else if (modelOfPackage == 7)      
    }

    
    
    //Load packages in packages_hashTable. Key is the package number
    public void createPackages() {
        try {
            int numOfPackages = ProblemModelingForm.numOfPackages;
            int numOfCategories = ProblemModelingForm.numOfTopCategories;
            //int numOfItemsPerCategory = ProblemModelingForm.numOfItemsPerCategory;
            //modelOfPackage = 1: remove the edge with maximum rating
            //modelOfPackage = 2: remove the edge with minimum rating
            //modelOfPackage = 3: remove the 50% of Edges with upper ratings
            //modelOfPackage = 4: remove the 50% of Edges with lower ratings
            //modelOfPackage = 5: remove all (100%) the Edges
            //modelOfPackage = 6: remove all (100%) movie nodes in order to produce distinct packages
            int modelOfCreatingPackages = ProblemModelingForm.modelOfCreatingPackages;
            if (ProblemModelingForm.numOfMaxAppearancesPerItem > 0) { //initialization of num of max appearances per item
                for (int i = 0; i < ProblemModelingForm.vertexItemOfTopCategories_list.size(); i++) {
                    vertexItemOfTopCategories_list.get(i).setNumOfMaxAppearances(ProblemModelingForm.numOfMaxAppearancesPerItem);
                }
            }
            //the hashTable of the solution with movies. 
            ProblemSolutionNPackagesForm.packages_hashTable.clear(); //The key of the hashTable is the number of package
            //for each package run min cost flow algorithm and create packages
            for (int p = 0; p < numOfPackages; p++) { //package number = p+1
                try {
                    if (runMinCostFlow(p, numOfCategories) == 0) {
                        ProblemModelingForm.numOfPackages = p;
                        break;
                    }
                } catch (Exception e) {
                    ProblemModelingForm.numOfPackages = p;
                    this.tx_runningTime.setText(overallRunningTime + " msec");
                    System.out.println("\n Exception: " + e);
                    return;
                }
                //if the modelOfCreatingPackages == 1 or 2, the maximum or minimum rating edge will be removed from the graph
                double ratingOfRemovingEdge = 0.0;
                if (modelOfCreatingPackages == 2) {//finding the mimimum ratiting of edges
                    ratingOfRemovingEdge = 1000.0;
                }
                int movieIDOfRemovingEdge = 0;
                String categoryOfRemovingEdge = ""; //The category of best movie edge
                int numOfProbability = 2; //probability = 1/numOfProbability.  Probability of removing or remaing an edge of the graph
                Random random = new Random(); //it uses in order to deside for remaining or removing of an edge

                //HashTable of <category, List<MovieForPackage>
                Hashtable<String, List<ItemForPackage>> category_movieForPackage_hashTable = new Hashtable<>();
                int len = solutionOfProblem.getNamesOfEdges().length;

                List<ItemForPackage> moviesForRemovingEdges_list = new ArrayList<>();

                //put solution in category_movieForPackage_hashTable
                for (int i = 0; i < len; i++) {
                    String[] part = solutionOfProblem.getNamesOfEdges()[i].split("_");
                    if (solutionOfProblem.getFlowOfEdges()[i] > 0.0
                            && !part[0].equals("source") && !part[0].equals("sink")
                            && !part[1].equals("source") && !part[1].equals("sink")) {
                        int movieID = Integer.valueOf(part[0]);
                        String category = part[1];
                        double cost = solutionOfProblem.getCostOfEdges()[i];
                        double rating = 1.0 / cost;
                        //remaining the removing edges    
                        if (modelOfCreatingPackages == 1) { //remove the maximum rating edge   
                            //finding the best Rating
                            //The remaing movie has the greatest rating
                            //if two or more movies have the same rating then the probability to remove one edge is the same for each edge 
                            if (rating > ratingOfRemovingEdge) {
                                ratingOfRemovingEdge = rating;
                                movieIDOfRemovingEdge = movieID;
                                categoryOfRemovingEdge = category;
                                numOfProbability = 2;
                            } else if (rating == ratingOfRemovingEdge) {
                                if (random.nextInt(numOfProbability) == 0) {
                                    ratingOfRemovingEdge = rating;
                                    movieIDOfRemovingEdge = movieID;
                                    categoryOfRemovingEdge = category;
                                    numOfProbability++;
                                    ///////////
                                    // System.out.println(" random: " + random.nextInt(numOfProbability) + " numOfProbability: " + numOfProbability);
                                    /////////
                                }
                            }
                        } else if (modelOfCreatingPackages == 2) { //remove the minimum rating edge   
                            //finding the edge with the minimum rating
                            //The remaing movie has the lowest rating
                            //if two or more movies have the same rating then the probability to remove one edge is the same for each edge 
                            if (rating < ratingOfRemovingEdge) {
                                ratingOfRemovingEdge = rating;
                                movieIDOfRemovingEdge = movieID;
                                categoryOfRemovingEdge = category;
                                numOfProbability = 2;
                            } else if (rating == ratingOfRemovingEdge) {
                                if (random.nextInt(numOfProbability) == 0) {
                                    ratingOfRemovingEdge = rating;
                                    movieIDOfRemovingEdge = movieID;
                                    categoryOfRemovingEdge = category;
                                    numOfProbability++;
                                    ///////////
                                    // System.out.println(" random: " + random.nextInt(numOfProbability) + " numOfProbability: " + numOfProbability);
                                    /////////
                                }
                            }
                        } else { //creating the list in order to remove the edges of the graph. For removing 50% and 100% of edges
                            int numOfMaxAppear = 1;
                            for (int s = 0; s < vertexItemOfTopCategories_list.size(); s++) { //find number of max appearances for this movie
                                if (movieID == vertexItemOfTopCategories_list.get(s).getItemID()) {
                                    numOfMaxAppear = vertexItemOfTopCategories_list.get(s).getNumOfMaxAppearances();
                                    break;
                                }

                            }
                            moviesForRemovingEdges_list.add(new ItemForPackage(movieID, numOfMaxAppear, category, "", rating));
                            /////////////////////////////////
                            //System.out.println(moviesForRemovingEdges_list.get(0).getMovieID());
                        }
                        String title = movies_hashTable.get(movieID).getTitle();
                        int maxOfAppearances = movies_hashTable.get(movieID).getNumOfMaxAppearances();
                        List<ItemForPackage> movieForPackage_list = new ArrayList<>();
                        if (category_movieForPackage_hashTable.get(category) != null) {
                            movieForPackage_list = category_movieForPackage_hashTable.get(category);
                        }
                        ItemForPackage movieForPackage = new ItemForPackage(movieID, maxOfAppearances, category, title, rating);
                        movieForPackage_list.add(movieForPackage);
                        if (movieForPackage_list.size() > 1) {
                            //sorting based on ratings                 
                            Collections.sort(movieForPackage_list, new Comparator<ItemForPackage>() {
                                @Override
                                public int compare(ItemForPackage mfp1, ItemForPackage mfp2) {
                                    return (int) (mfp2.getRating() * 100000.0 - mfp1.getRating() * 100000.0);
                                }
                            });
                        }
                        category_movieForPackage_hashTable.put(category, movieForPackage_list);
                    }
                }
                ///////////////
                // System.out.println();
                // System.out.println(" bestRatingMovieID: " + bestRatingMovieID + " bestCategory: " + bestMovieCategory + " bestRating: " + bestRating);
                // System.out.println(" remove Edges: ");
                /////////////////
                ProblemSolutionNPackagesForm.packages_hashTable.put(p + 1, category_movieForPackage_hashTable); //Key of hashtable is the package Number, 
                //remove the best edge of the graph and run the min cost flow algorithm againt            
                if (p < numOfPackages) { //remove edges in order to re-run the min cost flow algorithm
                    if (modelOfCreatingPackages == 1 || modelOfCreatingPackages == 2) {
                        this.removeOneEdgeOfGraph(movieIDOfRemovingEdge, categoryOfRemovingEdge);
                    } else { //modelOfPackage is 3, 4, 5 or 6
                        removeEdgesOrNodes(modelOfCreatingPackages, moviesForRemovingEdges_list);
                    }
                }

                //if number Of Appearances == Number Of Max appearances then remove the item node
                if (ProblemModelingForm.numOfMaxAppearancesPerItem > -1) {
                    //if (moviesForRemovingEdges_list.get(r).getMaxAppearances() > 1) { //remove one edge only
                    //int sizeOfMovieList = vertexMovieOfTopCategories_list.size();
                    for (int m = 0; m < moviesForRemovingEdges_list.size(); m++) {
                        for (int i = 0; i < vertexItemOfTopCategories_list.size(); i++) {
                            if (vertexItemOfTopCategories_list.get(i).getItemID() == moviesForRemovingEdges_list.get(m).getItemID()) {
                                int numOfAppears = vertexItemOfTopCategories_list.get(i).getNumOfMaxAppearances();
                                if (numOfAppears > 1) {
                                    vertexItemOfTopCategories_list.get(i).setNumOfMaxAppearances((numOfAppears - 1));
                                    break;
                                } else {//remove whole the node
                                    removeOneItemNodeOfGraph(vertexItemOfTopCategories_list.get(i).getItemID());
                                    break;
                                }
                            }
                        }
                    }

                }

            }//close for(packageNubler)
            this.tx_runningTime.setText(overallRunningTime + " msec");
        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: createPackages() " + e, "Message", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
            return;
        }
    }


   
    public void printSolution() {
        try {
            //delete rows of table
            Integer b = tb_1.getRowCount();
            for (int i = 0; i < b; i++) {
                ((DefaultTableModel) tb_1.getModel()).removeRow(0);
            }
            //print the solution
            double overallRating = 0.0;
            double sumOfRatings = 0.0;
            for (int k = 0; k < ProblemModelingForm.numOfPackages; k++) {
                //countPackage++;
                // int numOfPackage = keys.nextElement();
                ((DefaultTableModel) this.tb_1.getModel()).addRow(new Object[]{"P" + (k + 1) + ":", "", "", "", ""});

                //Hashtable<String, List<MovieForPackage>> category_movieForPackage_hashTable = new Hashtable<>();
                Hashtable<String, List<ItemForPackage>> category_movieForPackage_hashTable = packages_hashTable.get(k + 1);

                Enumeration<String> categoryKeys = category_movieForPackage_hashTable.keys();
                int countItemsPerPackage = 0; //item number
                while (categoryKeys.hasMoreElements()) {
                    List<ItemForPackage> movieForPackage_list = new ArrayList<>();
                    String category = categoryKeys.nextElement();
                    movieForPackage_list = category_movieForPackage_hashTable.get(category);
                    for (int i = 0; i < movieForPackage_list.size(); i++) {
                        int movieID = movieForPackage_list.get(i).getItemID();
                        double rating = movieForPackage_list.get(i).getRating();
                        String title = movieForPackage_list.get(i).getTitle();
                        //String category = movieForPackage_list.get(i).getCategory();
                        countItemsPerPackage++;
                        ((DefaultTableModel) tb_1.getModel()).addRow(new Object[]{countItemsPerPackage, category, movieID, title, round(rating, 2)});
                        sumOfRatings += rating;
                    }
                }
                ((DefaultTableModel) tb_1.getModel()).addRow(new Object[]{"", "", "", "", "Sum Of Ratings: " + round(sumOfRatings, 2)});
                overallRating += sumOfRatings;
                sumOfRatings = 0.0;
                ((DefaultTableModel) tb_1.getModel()).addRow(new Object[]{"", "", "", "", ""});
            }
            this.tx_overallRating.setText(String.valueOf(round(overallRating, 2)));
            this.tx_averageRating.setText(String.valueOf(round((overallRating/ProblemModelingForm.numOfPackages), 2)));
        ////////////
        //System.out.println("num Of Items Per Package = " + forms.ItemsAllocationToCategoriesForm.numOfItemsPerPackage);
        ////////////
        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: printSolution() " + e, "Message", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
            return;
        }
    }
      
      
      public void printResultsToFile() {
        try {

            File resultFilePath_file = new File(StartForm.ratingsDataFile);
            File file = resultFilePath_file.getParentFile();
            String resultFilePath = file.getAbsolutePath() + "\\results_temp.txt";
           // System.out.println(resultFilePath);
            String nl = System.getProperty("line.separator");
            //System.out.println(nl);
            
            BufferedWriter bufferWriter = new BufferedWriter(new FileWriter(resultFilePath));
            //print the solution
            double overallRating = 0.0;
            double sumOfRatings = 0.0;
            /////////////////
            //String resultText = "no:  category,  movieID,  title,  rating\n";
            bufferWriter.write("no:  category,   itemId,   title,   rating" + nl + " " + nl);
            for (int k = 0; k < ProblemModelingForm.numOfPackages; k++) {
                //countPackage++;
                // int numOfPackage = keys.nextElement();
                
                //((DefaultTableModel) this.tb_1.getModel()).addRow(new Object[]{"P" + (k + 1) + ":", "", "", "", ""});
               bufferWriter.write("Package " + (k + 1) + ":" + nl);
               ///////////////////////
                //resultText += "Package " + (k + 1) + ":\n";
                //Hashtable<String, List<MovieForPackage>> category_movieForPackage_hashTable = new Hashtable<>();
                Hashtable<String, List<ItemForPackage>> category_movieForPackage_hashTable = packages_hashTable.get(k + 1);

                Enumeration<String> categoryKeys = category_movieForPackage_hashTable.keys();
                int countItemsPerPackage = 0; //item number
                while (categoryKeys.hasMoreElements()) {
                    List<ItemForPackage> movieForPackage_list = new ArrayList<>();
                    String category = categoryKeys.nextElement();
                    movieForPackage_list = category_movieForPackage_hashTable.get(category);
                    for (int i = 0; i < movieForPackage_list.size(); i++) {
                        int movieID = movieForPackage_list.get(i).getItemID();
                        double rating = movieForPackage_list.get(i).getRating();
                        String title = movieForPackage_list.get(i).getTitle();
                        //String category = movieForPackage_list.get(i).getCategory();
                        countItemsPerPackage++;
                        
                        int category_len= category.length();
                        String category_blanks ="";
                        for(int c=0; c<12-category_len; c++){
                            category_blanks +=" ";
                        }
                        int title_len= title.length();
                        String title_blanks ="";
                        for(int c=0; c<40-title_len; c++){
                            title_blanks +=" ";
                        }
                        int movie_len = 5;
                        if (movieID<10){
                            movie_len=1;
                        }
                        else if(movieID<100){
                            movie_len=2;
                        }
                        else if(movieID<1000){
                            movie_len=3;
                        }
                        else if(movieID<10000){
                            movie_len=4;
                        }
                        String movie_blanks ="";
                        for(int c=0; c<6-movie_len; c++){
                            movie_blanks +=" ";
                        }
                        int no_len = 2;
                        if (countItemsPerPackage<10){
                            no_len=1;
                        }
                        String no_blanks ="";
                        for(int c=0; c<4-no_len; c++){
                            no_blanks +=" ";
                        }
                        
                        
                        //((DefaultTableModel) tb_1.getModel()).addRow(new Object[]{countItemsPerPackage, category, movieID, title, round(rating, 2)});
                      /*  bufferWriter.write(countItemsPerPackage + ":" + no_blanks +
                                "" + category + ",\t" + category_blanks +
                                "" + movieID + ",\t"+ movie_blanks +
                                "" + title + ",\t" + title_blanks + 
                                "" + round(rating, 2) + nl);
                        */
                         bufferWriter.write(countItemsPerPackage + ":" + no_blanks + ""
                                + category + ",\t" 
                                + movieID + ",\t"
                                + title + ",   " 
                                + round(rating, 2) + nl);
                        //resultText += countItemsPerPackage + ": " + category + ", " + movieID + ", " + title + ", " + ", " + round(rating, 2) + "\n";
                        sumOfRatings += rating;
                    }
                }
                //((DefaultTableModel) tb_1.getModel()).addRow(new Object[]{"", "", "", "", "Sum Of Ratings: " + round(sumOfRatings, 2)});
                bufferWriter.write("\t\t\t\tSum Of Ratings: " + round(sumOfRatings, 2) + nl + " " + nl);
               /////////////////
                //resultText += "Sum Of Ratings: " + round(sumOfRatings, 2) + "\n\n";
                overallRating += sumOfRatings;
                sumOfRatings = 0.0;
                //((DefaultTableModel) tb_1.getModel()).addRow(new Object[]{"", "", "", "", ""});
            }
            bufferWriter.write("__________________________________________________________________" + nl);
            bufferWriter.write("\t\t\t\tOverall Rating: " + round(overallRating, 2) + nl);
            bufferWriter.write("\t\t\t\tAverage Rating: " + round((overallRating/ProblemModelingForm.numOfPackages), 2) + nl);
            ////////////////////
            //resultText += "Overall Rating " + round(overallRating, 2) + "\n";
            //resultText += "Average Rating " + round((overallRating/ProblemModelingForm.numOfPackages), 2) + "\n";
            bufferWriter.close();

            File result_file = new File(resultFilePath);
         
            /*   
            if (Desktop.isDesktopSupported()) {
                Desktop.getDesktop().edit(result_file);
            } else {
                // dunno, up to you to handle this
            }
            */
            
            if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                String cmd = "rundll32 url.dll,FileProtocolHandler " + result_file.getCanonicalPath();
                Runtime.getRuntime().exec(cmd);
            } else {
                Desktop.getDesktop().edit(result_file);
            }

            // this.tx_overallRating.setText(String.valueOf(round(overallRating, 2)));
            //this.tx_averageRating.setText(String.valueOf(round((overallRating/ProblemModelingForm.numOfPackages), 2)));
        ////////////
        //System.out.println(resultText);
        ////////////
        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: printResultsToFile() " + e, "Message", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
            return;
        }
    }
      
    
      
       public void printStatisticsAndSolution(int packageNumber, int numOfCategories, long runningTime) {
        try {
            int len = solutionOfProblem.getNamesOfEdges().length;
            //print statistics
            ((DefaultTableModel) tb_statistics.getModel()).addRow(new Object[]{
                packageNumber + 1,
                String.valueOf(ProblemModelingForm.vertexItemOfTopCategories_list.size() + numOfCategories + 2),
                String.valueOf(len),
                String.valueOf(ProblemModelingForm.vertexItemOfTopCategories_list.size()),
                String.valueOf(numOfCategories),
                runningTime
            });
            ((DefaultTableModel) tb_2.getModel()).addRow(new Object[]{"", "Cycle " + (packageNumber + 1) + ":", "", ""});
            //print the general solution
            for (int i = 0; i < len; i++) {
                ((DefaultTableModel) tb_2.getModel()).addRow(new Object[]{
                    String.valueOf(i + 1),
                    solutionOfProblem.getNamesOfEdges()[i],
                    String.valueOf(solutionOfProblem.getFlowOfEdges()[i]),
                    String.valueOf(round(solutionOfProblem.getCostOfEdges()[i], 2))}); //round of cost in to decimals
            }
            ((DefaultTableModel) tb_2.getModel()).addRow(new Object[]{" ", " ", " ", " "});

        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: printStatisticsAndSolution() " + e, "Message", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
            return;
        }
    }


    
 //it rounds the double number in specific number of decimals
    public double round(double number, int decimals) {
        if (decimals < 0) {
            return number; //no change in number
        }
        long factor = (long) Math.pow(10, decimals);
        number = number * factor;
        long tmp = Math.round(number);
        return (double) tmp / factor;
    }

    
    
    /*
     //remove edges from the graph in order to re-run the algorithm
    //modelOfPackage = 3: remove the 50% of Edges with upper ratings
    //modelOfPackage = 4: remove the 50% of Edges with lower ratings
    //modelOfPackage = 5: remove all (100%) the Edges
    //modelOfPackage = 6: remove all movie nodes in order to produce distinct packages
     public void removeEdgesOrNodes_old(int modelOfPackage, List<MovieForPackage> moviesForRemovingEdges_list) {
        if (moviesForRemovingEdges_list.size() == 0) {
            return;
        }
        if (modelOfPackage == 3) { //modelOfPackage == 3: remove the 50% of Edges with upper ratings
            //sorting moviesForRemovingEdges_list based on rating. Descent sorting               
            Collections.sort(moviesForRemovingEdges_list, new Comparator<MovieForPackage>() {
                public int compare(MovieForPackage mfp1, MovieForPackage mfp2) {
                    return mfp2.getRating() - mfp1.getRating();
                }
            });
            int numOfRemovingEdges = (int) round(((double) moviesForRemovingEdges_list.size() / 2.0), 0);
            for (int r = 0; r < numOfRemovingEdges; r++) {
                if (ProblemModelingForm.numOfMaxAppearancesPerItem > -1) {
                    if (moviesForRemovingEdges_list.get(r).getMaxAppearances() > 1) { //remove one edge only
                        //int sizeOfMovieList = vertexMovieOfTopCategories_list.size();
                        for (int i = 0; i < vertexMovieOfTopCategories_list.size(); i++) {
                            if (vertexMovieOfTopCategories_list.get(i).getMovieID() == moviesForRemovingEdges_list.get(r).getMovieID()) {
                                int numOfApper = vertexMovieOfTopCategories_list.get(i).getNumOfMaxAppearances();
                                vertexMovieOfTopCategories_list.get(i).setNumOfMaxAppearances((numOfApper - 1));
                            }
                            break;
                        }
                        removeOneEdgeOfGraph(
                                moviesForRemovingEdges_list.get(r).getMovieID(),
                                moviesForRemovingEdges_list.get(r).getCategory());
                    } else {//remove whole the node
                        removeOneMovieNodeOfGraph(moviesForRemovingEdges_list.get(r).getMovieID(),
                                moviesForRemovingEdges_list.get(r).getCategory());
                    }
                } else { //remove one edge
                    removeOneEdgeOfGraph(
                            moviesForRemovingEdges_list.get(r).getMovieID(),
                            moviesForRemovingEdges_list.get(r).getCategory());
                }
            }


        } else if (modelOfPackage == 4) { //modelOfPackage == 4: remove the 50% of Edges with lower rating
            //sorting moviesForRemovingEdges_list based on rating. Ascent sorting               
            Collections.sort(moviesForRemovingEdges_list, new Comparator<MovieForPackage>() {
                public int compare(MovieForPackage mfp1, MovieForPackage mfp2) {
                    return mfp1.getRating() - mfp2.getRating();
                }
            });
            int numOfRemovingEdges = (int) round(((double) moviesForRemovingEdges_list.size() / 2.0), 0);
            for (int r = 0; r < numOfRemovingEdges; r++) {
                if (ProblemModelingForm.numOfMaxAppearancesPerItem > -1) {
                    if (moviesForRemovingEdges_list.get(r).getMaxAppearances() > 1) { //remove one edge only
                        //int sizeOfMovieList = vertexMovieOfTopCategories_list.size();
                        for (int i = 0; i < vertexMovieOfTopCategories_list.size(); i++) {
                            if (vertexMovieOfTopCategories_list.get(i).getMovieID() == moviesForRemovingEdges_list.get(r).getMovieID()) {
                                int numOfApper = vertexMovieOfTopCategories_list.get(i).getNumOfMaxAppearances();
                                vertexMovieOfTopCategories_list.get(i).setNumOfMaxAppearances((numOfApper - 1));
                            }
                            break;
                        }
                        removeOneEdgeOfGraph(
                                moviesForRemovingEdges_list.get(r).getMovieID(),
                                moviesForRemovingEdges_list.get(r).getCategory());
                    } else {//remove whole the node
                        removeOneMovieNodeOfGraph(moviesForRemovingEdges_list.get(r).getMovieID());
                    }
                } else { //remove one edge
                    removeOneEdgeOfGraph(
                            moviesForRemovingEdges_list.get(r).getMovieID(),
                            moviesForRemovingEdges_list.get(r).getCategory());
                }
            }
        } else if (modelOfPackage == 5) { //modelOfPackage = 5: remove all (100%) the Edges
            int numOfRemovingEdges = moviesForRemovingEdges_list.size();
            for (int r = 0; r < numOfRemovingEdges; r++) {
                if (ProblemModelingForm.numOfMaxAppearancesPerItem > -1) {
                    if (moviesForRemovingEdges_list.get(r).getMaxAppearances() > 1) { //remove one edge only
                        //int sizeOfMovieList = vertexMovieOfTopCategories_list.size();
                        for (int i = 0; i < vertexMovieOfTopCategories_list.size(); i++) {
                            if (vertexMovieOfTopCategories_list.get(i).getMovieID() == moviesForRemovingEdges_list.get(r).getMovieID()) {
                                int numOfApper = vertexMovieOfTopCategories_list.get(i).getNumOfMaxAppearances();
                                vertexMovieOfTopCategories_list.get(i).setNumOfMaxAppearances((numOfApper - 1));
                            }
                            break;
                        }
                        removeOneEdgeOfGraph(
                                moviesForRemovingEdges_list.get(r).getMovieID(),
                                moviesForRemovingEdges_list.get(r).getCategory());
                    } else {//remove whole the node
                        removeOneMovieNodeOfGraph(moviesForRemovingEdges_list.get(r).getMovieID());
                    }
                } else { //remove one edge
                    removeOneEdgeOfGraph(
                            moviesForRemovingEdges_list.get(r).getMovieID(),
                            moviesForRemovingEdges_list.get(r).getCategory());
                }
            }
        } else if (modelOfPackage == 6) { //modelOfPackage = 6: remove all movie nodes in order to produce distinct packages
            int sizeOfMovieList = vertexMovieOfTopCategories_list.size();
            int sizeOfCategoryList = vertexTopCategory_list.size();
            int numOfRemovingEdges = moviesForRemovingEdges_list.size();
            /////////////////////////////
            //System.out.println("len: " + numOfRemovingEdges);
            ///////////////////
            for (int r = 0; r < numOfRemovingEdges; r++) {
                //remove movie nodes
                for (int i = 0; i < sizeOfMovieList; i++) {
                    if (vertexMovieOfTopCategories_list.get(i).getMovieID() == moviesForRemovingEdges_list.get(r).getMovieID()) {
                            vertexMovieOfTopCategories_list.remove(i);
                        /////////////////////////////
                        //System.out.println("remove movie node: " + moviesForRemovingEdges_list.get(r).getMovieID());
                        /////////////
                        break;
                    }
                }
                // remove category Edges
                for (int i = 0; i < sizeOfCategoryList; i++) {
                    int len = vertexTopCategory_list.get(i).getEdgeMovieCategory_list().size();
                    for (int e = 0; e < len; e++) {
                        if (vertexTopCategory_list.get(i).getEdgeMovieCategory_list().get(e).getMovieID() == moviesForRemovingEdges_list.get(r).getMovieID()) {
                            vertexTopCategory_list.get(i).getEdgeMovieCategory_list().remove(e);
                            /////////////////////////////
                            //System.out.println("remove category edge for movieID: " + moviesForRemovingEdges_list.get(r).getMovieID());
                            /////////////
                            break;
                        }
                    }
                }
            }//close --> for (int r = 0; r < numOfRemovingEdges; r++)
        }//close --> else if (modelOfPackage == 6)
        else if (modelOfPackage == 7) { //modelOfPackage = 7: Each node has a number of max appearances
            int sizeOfMovieList = vertexMovieOfTopCategories_list.size();
            int sizeOfCategoryList = vertexTopCategory_list.size();
            int numOfRemovingEdges = moviesForRemovingEdges_list.size();
            
            /////////////////////////////
            //System.out.println("len: " + numOfRemovingEdges);
            ///////////////////
            for (int r = 0; r < numOfRemovingEdges; r++) {
                int flag = 0;//flag = 1: remove category edges
                //remove movie nodes
                for (int i = 0; i < sizeOfMovieList; i++) {
                    if (vertexMovieOfTopCategories_list.get(i).getMovieID() == moviesForRemovingEdges_list.get(r).getMovieID()) {
                        int maxAppear = vertexMovieOfTopCategories_list.get(i).getNumOfMaxAppearances();
                        ////////////////////////////////////
                        System.out.println("maxApper = " + maxAppear);
                        if (maxAppear > 1) {
                            /////////////////////////////// 
                            System.out.println(".setNumOfMaxAppearances: " + (maxAppear - 1));
                            vertexMovieOfTopCategories_list.get(i).setNumOfMaxAppearances((maxAppear - 1));
                            break;
                        } else {
                            vertexMovieOfTopCategories_list.remove(i);
                            /////////////////////////////// 
                            System.out.println("remove movieID: " + vertexMovieOfTopCategories_list.get(i).getMovieID());
                            flag = 1;
                            break;

                            /////////////////////////////
                            //System.out.println("remove movie node: " + moviesForRemovingEdges_list.get(r).getMovieID());
                            /////////////
                        }
                    }
                }
                // remove category Edges
                if (flag == 1) {
                    for (int i = 0; i < sizeOfCategoryList; i++) {
                        int len = vertexTopCategory_list.get(i).getEdgeMovieCategory_list().size();
                        for (int e = 0; e < len; e++) {
                            if (vertexTopCategory_list.get(i).getEdgeMovieCategory_list().get(e).getMovieID() == moviesForRemovingEdges_list.get(r).getMovieID()) {
                                vertexTopCategory_list.get(i).getEdgeMovieCategory_list().remove(e);
                                /////////////////////////////
                                //System.out.println("remove category edge for movieID: " + moviesForRemovingEdges_list.get(r).getMovieID());
                                /////////////
                                break;
                            }
                        }
                    }
                }
            }//close --> for (int r = 0; r < numOfRemovingEdges; r++)
        }//close --> else if (modelOfPackage == 7)
    }
    
    */
    
    
    
    
    
    
    /*
    public void runMinCostFlowProblemCPLEX_old() {
        LinearProgramming linearProgramming = new LinearProgramming();
        //solutionOfProblem = linearProgramming.linearProgrammingCalculator();
        solutionOfProblem = linearProgramming.linearProgrammingCalculatorCPLEX();
        if (solutionOfProblem == null) {
            tx1.setText("No feasible solution!");
        } else {
            tx1.setText("Optimal Solution Found!");
            createPackages();
            printSolution();
        }
    }
    */
/*
       public void printSolution_old() {
        int len = solutionOfProblem.getNamesOfEdges().length;
        int numOfCategories = ProblemModelingForm.numOfTopCategories;
        int count = 0;
        
        this.tx_edges.setText(String.valueOf(len)); //num of edges
        this.tx_categoryNodes.setText(String.valueOf(numOfCategories )); //num of category nodes
        this.tx_movieNodes.setText(String.valueOf(ProblemModelingForm.vertexMovieOfTopCategories_list.size())); //num of movie nodes
        this.tx_nodes.setText(String.valueOf(ProblemModelingForm.vertexMovieOfTopCategories_list.size()+numOfCategories+2)); //num of nodes
        
        //print the solution
        int sumOfRatings = 0;
        for (int i = 0; i < len; i++) {
            String[] part = solutionOfProblem.getNamesOfEdges()[i].split("_");
            String movieID = part[0];
            String category = part[1];

            if (solutionOfProblem.getFlowOfEdges()[i] > 0.0 
                    && !part[0].equals("source") && !part[0].equals("sink") 
                    && !part[1].equals("source") && !part[1].equals("sink")) {
                count++;
                double cost = solutionOfProblem.getCostOfEdges()[i];
                sumOfRatings += (int) 1/cost; 
                String title = movies_hashTable.get(Integer.valueOf(movieID)).getTitle();
                ((DefaultTableModel) tb_1.getModel()).addRow(new Object[]{count, category, movieID, title, 1 / cost});

            }
        }
        
       // this.tx_sumOfRatings.setText(String.valueOf(sumOfRatings)); //sum of ratings

        //print the general solution
        for (int i = 0; i < len; i++) {

            ((DefaultTableModel) tb_2.getModel()).addRow(new Object[]{
                i + 1, solutionOfProblem.getNamesOfEdges()[i],
                solutionOfProblem.getFlowOfEdges()[i],
                round(solutionOfProblem.getCostOfEdges()[i], 2)}); //round of cost in to decimals
        }
    }
*/
 
    
    
      /*    
    public void runMinCostFlowProblemMATH3() {
        LinearProgramming linearProgramming = new LinearProgramming();
        solutionOfProblem = linearProgramming.linearProgrammingCalculator();
        //solutionOfProblem = linearProgramming.linearProgrammingCalculatorCPLEX();
        if (solutionOfProblem == null) {
            tx1.setText("No feasible solution!");
        } else {
            tx1.setText("Optimal Solution Found!");
            createPackages();
           // printSolution();
        }
    }
*/
    
  /*
    //Load packages in packages_hashTable 
    public void createPackages_old() {
        int numOfPackages = ProblemModelingForm.numOfPackages;

        int len = solutionOfProblem.getNamesOfEdges().length;
        int numOfCategories = ProblemModelingForm.numOfTopCategories;

        //the hashTable of the solution with movies in order of ratings. The key of the hashTable is the category
        Hashtable<String, List<int[]>> category_movieIDRating_hashTable = new Hashtable<String, List<int[]>>();

        this.packages_hashTable.clear();

        for (int i = 0; i < len; i++) {
            String[] part = solutionOfProblem.getNamesOfEdges()[i].split("_");

            if (solutionOfProblem.getFlowOfEdges()[i] > 0.0
                    && !part[0].equals("source") && !part[0].equals("sink")
                    && !part[1].equals("source") && !part[1].equals("sink")) {
                String category = part[1];
                int movieID = Integer.valueOf(part[0]);
                double cost = solutionOfProblem.getCostOfEdges()[i];
                int rating = (int) (1 / cost);

                List<int[]> movieID_rating_list = new ArrayList<int[]>();

                if (category_movieIDRating_hashTable.get(category) != null) {
                    movieID_rating_list = category_movieIDRating_hashTable.get(category);
                }
                movieID_rating_list.add(new int[]{movieID, rating});

                if (movieID_rating_list.size() > 1) {
                    //sorting based on ratings
                    Collections.sort(movieID_rating_list, new Comparator<int[]>() {
                        public int compare(int[] a, int[] b) {
                            return a[1] - b[1];
                        }
                    });
                }
                category_movieIDRating_hashTable.put(category, movieID_rating_list);
            }
        }

  
        Enumeration<String> keys = category_movieIDRating_hashTable.keys();
        //int count = 0;
        while (keys.hasMoreElements()) {
            String category = keys.nextElement();
            List<int[]> movieID_rating_list = new ArrayList<int[]>();
            movieID_rating_list = category_movieIDRating_hashTable.get(category);

            for (int i = 0; i < movieID_rating_list.size(); i++) { //i<numbero of packages
                List<MovieForPackage> movie_list = new ArrayList<>();
                if (this.packages_hashTable.get(i+1) != null) {
                    movie_list = packages_hashTable.get(i+1);
                }
                int movieID = movieID_rating_list.get(i)[0];
                int rating = movieID_rating_list.get(i)[1];
                String title = movies_hashTable.get(movieID).getTitle();
                movie_list.add(new MovieForPackage(movieID, category, title, rating));
                this.packages_hashTable.put(i+1, movie_list);
            }
        }

    }
*/
    
   /* 
    public void printSolution_old() {
        int len = solutionOfProblem.getNamesOfEdges().length;
        int numOfCategories = ProblemModelingForm.numOfTopCategories;

        this.tx_edges.setText(String.valueOf(len)); //num of edges
        this.tx_categoryNodes.setText(String.valueOf(numOfCategories)); //num of category nodes
        this.tx_movieNodes.setText(String.valueOf(ProblemModelingForm.vertexMovieOfTopCategories_list.size())); //num of movie nodes
        this.tx_nodes.setText(String.valueOf(ProblemModelingForm.vertexMovieOfTopCategories_list.size() + numOfCategories + 2)); //num of nodes

        //delete rows of tables
        Integer b = tb_1.getRowCount();
        for (int i = 0; i < b; i++) {
            ((DefaultTableModel) tb_1.getModel()).removeRow(0);
        }
        b = tb_2.getRowCount();
        for (int i = 0; i < b; i++) {
            ((DefaultTableModel) tb_2.getModel()).removeRow(0);
        }
        
        //print the solution
        int sumOfRatings = 0;
        int countPackage = 0;
        Enumeration<Integer> keys = packages_hashTable.keys();
        while (keys.hasMoreElements()) {
            countPackage++;
            int numOfPackage = keys.nextElement();
            ((DefaultTableModel) this.tb_1.getModel()).addRow(new Object[]{"P" + countPackage + ":", "", "", "", ""});
            List<MovieForPackage> movieForPackage_list = new ArrayList<>();
            movieForPackage_list = packages_hashTable.get(numOfPackage);

            for (int i = 0; i < movieForPackage_list.size(); i++) {
                int movieID = movieForPackage_list.get(i).getMovieID();
                int rating = movieForPackage_list.get(i).getRating();
                String title = movies_hashTable.get(movieID).getTitle();
                String category = movieForPackage_list.get(i).getCategory();
                ((DefaultTableModel) tb_1.getModel()).addRow(new Object[]{i + 1, category, movieID, title, rating});
                sumOfRatings += rating;
            }
            ((DefaultTableModel) tb_1.getModel()).addRow(new Object[]{"", "", "", "", "Sum Of Ratings: "+String.valueOf(sumOfRatings)});
            sumOfRatings=0;
            ((DefaultTableModel) tb_1.getModel()).addRow(new Object[]{"", "", "", "", ""});
        }

        //print the general solution
        for (int i = 0; i < len; i++) {
            ((DefaultTableModel) tb_2.getModel()).addRow(new Object[]{
                i + 1, solutionOfProblem.getNamesOfEdges()[i],
                solutionOfProblem.getFlowOfEdges()[i],
                round(solutionOfProblem.getCostOfEdges()[i], 2)}); //round of cost in to decimals
        }
    }

*/  
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProblemSolutionNPackagesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProblemSolutionNPackagesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProblemSolutionNPackagesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProblemSolutionNPackagesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProblemSolutionNPackagesForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_back;
    private javax.swing.JButton bt_back1;
    private javax.swing.JButton bt_evaluation;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JMenu menu_about;
    private javax.swing.JMenuItem menu_back;
    private javax.swing.JMenuItem menu_exit;
    private javax.swing.JTable tb_1;
    private javax.swing.JTable tb_2;
    private javax.swing.JTable tb_statistics;
    private javax.swing.JTextField tx1;
    private javax.swing.JTextField tx_averageRating;
    private javax.swing.JTextField tx_itemsPerCategory;
    private javax.swing.JTextField tx_maxAppearances;
    private javax.swing.JTextField tx_modelOfCreatingPackages;
    private javax.swing.JTextField tx_numOfCategories;
    private javax.swing.JTextField tx_numOfPackages;
    private javax.swing.JTextField tx_overallRating;
    private javax.swing.JTextField tx_runningTime;
    private javax.swing.JTextField tx_selectedUser;
    // End of variables declaration//GEN-END:variables
}
