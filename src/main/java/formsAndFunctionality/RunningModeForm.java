package formsAndFunctionality;

import collaborativeFiltering.CollaborativeFiltering;
import entityBasicClasses.ItemRating;
import fileManagerClasses.ReadFiles;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Math.sqrt;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
//import static java.lang.Math.abs;

/**
 * @author: Panagiotis Kouris 
 * date: Nov 2015
 */
public class RunningModeForm extends javax.swing.JFrame{

   // static public int selectedUserID = 1;
    static public int currentUserId;
    //runningMode:
    //-1: running by using actual ratings (default value)
    //0: running by using predicted ratings
    //1: evaluation by concealing 10% of items 
    //2: evaluation by concealing 20% of items 
    //3: evaluation by concealing 30% of items 
    //4: evaluation by concealing 40% of items
    // ...
    static public int runningMode = -1;
    static public String runningMode_text = "";

    static public double popularityFactor = 5.0; //new_rating = rating + (popularity factor)*(popularity fraction)
   
    static public int itemsOfCFoutput;  //num of items of Collaborative Filtering output
    static public int itemsOfCFoutput_selectedIndex = 0; //0: 100% (default value), 1: 100 items, 2: 200 items, ...
    
    static public int itemsForPackages = 500; //num of items for creating packages
    static public int itemsForPackages_selectedIndex = 5; //0: 100% , 1: 100 items, 2: 200 items, ...
    
    static public double minRatingOfHiddenItems = 2.0; //The minimum value of ratings of hidden items in evaluation mode
    static public List<ItemRating> predictedItemRatings_list = new ArrayList<ItemRating>();
     static public List<ItemRating> predictedItemRatingsWithPopularity_list = new ArrayList<ItemRating>();
    static public List<ItemRating> concealedItemRatings_list = new ArrayList<ItemRating>();

    /**
     * Creates new form StartForm
     */
    public RunningModeForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tb_actualRatings = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_predictedRatings = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        bt_modeApply = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cb_runningMode = new javax.swing.JComboBox<>();
        cb_itemsOfCFoutput = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cb_popularityFactor = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cb_minValueOfRatings = new javax.swing.JComboBox<>();
        cb_itemsForPackages = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        bt_next = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        tx_selectedUser = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tb_concealedRatings = new javax.swing.JTable();
        bt_sortingByItemId = new javax.swing.JButton();
        bt_soritngByRating = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        tx_CFRunningTime = new javax.swing.JTextField();
        tx_TP_FP_FN_measures = new javax.swing.JTextField();
        tx_precission_recall_F_measures = new javax.swing.JTextField();
        tx_MAE_RMSE = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_convertRatingsFile = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menu_exit = new javax.swing.JMenuItem();
        menu_about = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PackageRecSys");
        setSize(new java.awt.Dimension(900, 700));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Actual Ratings of User"));

        tb_actualRatings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num Of Ratings", "Actual Ratings: [itemID, rating]"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tb_actualRatings);
        if (tb_actualRatings.getColumnModel().getColumnCount() > 0) {
            tb_actualRatings.getColumnModel().getColumn(0).setMinWidth(120);
            tb_actualRatings.getColumnModel().getColumn(0).setPreferredWidth(120);
            tb_actualRatings.getColumnModel().getColumn(0).setMaxWidth(120);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 906, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Predicted Ratings of User"));

        tb_predictedRatings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num Of Ratings", "Predicted Ratings: [itemId, rating]"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tb_predictedRatings);
        if (tb_predictedRatings.getColumnModel().getColumnCount() > 0) {
            tb_predictedRatings.getColumnModel().getColumn(0).setMinWidth(120);
            tb_predictedRatings.getColumnModel().getColumn(0).setPreferredWidth(120);
            tb_predictedRatings.getColumnModel().getColumn(0).setMaxWidth(120);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 909, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Running Mode"));

        bt_modeApply.setText("Apply");
        bt_modeApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_modeApplyActionPerformed(evt);
            }
        });

        jLabel1.setText(" Mode:");

        cb_runningMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Using actual ratings", "Using predicted ratings", "Evaluation by Hiding 10% of items", "Evaluation by Hiding 20% of items", "Evaluation by Hiding 30% of items", "Evaluation by Hiding 40% of items", "Evaluation by Hiding 50% of items", "Evaluation by Hiding 60% of items", "Evaluation by Hiding 70% of items", "Evaluation by Hiding 80% of items", "Evaluation by Hiding 90% of items" }));
        cb_runningMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_runningModeActionPerformed(evt);
            }
        });

        cb_itemsOfCFoutput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "100%", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "1800", "1900", "2000", "2100", "2200", "2300", "2400", "2500", "2600", "2700", "2800", "2900", "3000", "3100", "3200", "3300", "3400", "3500", "3600", "3700", "3800", "3900", "4000" }));
        cb_itemsOfCFoutput.setToolTipText("Number of Mahout CF recommendations");
        cb_itemsOfCFoutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_itemsOfCFoutputActionPerformed(evt);
            }
        });

        jLabel2.setText("Items of CF output:");

        jLabel3.setText("Item Popularity factor:");

        cb_popularityFactor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50" }));
        cb_popularityFactor.setToolTipText("new_rating = rating + (popularity factor)*(popularity fraction)");
        cb_popularityFactor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_popularityFactorActionPerformed(evt);
            }
        });

        jLabel4.setText("Minimum rating of hidden items:");

        cb_minValueOfRatings.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5" }));
        cb_minValueOfRatings.setToolTipText("Minimum rating value of hidden items");
        cb_minValueOfRatings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_minValueOfRatingsActionPerformed(evt);
            }
        });

        cb_itemsForPackages.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "100%", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700", "1800", "1900", "2000", "2100", "2200", "2300", "2400", "2500", "2600", "2700", "2800", "2900", "3000", "3100", "3200", "3300", "3400", "3500", "3600", "3700", "3800", "3900", "4000" }));
        cb_itemsForPackages.setToolTipText("Number of Mahout CF recommendations");
        cb_itemsForPackages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_itemsForPackagesActionPerformed(evt);
            }
        });

        jLabel5.setText("Items for packages:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cb_runningMode, 0, 356, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cb_itemsOfCFoutput, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, Short.MAX_VALUE)))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cb_itemsForPackages, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cb_popularityFactor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cb_minValueOfRatings, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bt_modeApply, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cb_runningMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cb_itemsOfCFoutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(cb_itemsForPackages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cb_popularityFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)))
                        .addGap(5, 5, 5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_modeApply)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cb_minValueOfRatings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        bt_next.setText("Next");
        bt_next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_nextActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tx_selectedUser.setBackground(new java.awt.Color(204, 204, 255));
        tx_selectedUser.setText("Selected UserId: ");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Hidden Ratings of User (Evaluation Mode)"));

        tb_concealedRatings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num Of Ratings", "Concealed Ratings: [itemId, rating]"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tb_concealedRatings);
        if (tb_concealedRatings.getColumnModel().getColumnCount() > 0) {
            tb_concealedRatings.getColumnModel().getColumn(0).setMinWidth(120);
            tb_concealedRatings.getColumnModel().getColumn(0).setPreferredWidth(120);
            tb_concealedRatings.getColumnModel().getColumn(0).setMaxWidth(120);
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 909, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        bt_sortingByItemId.setText("Sorting by itemId");
        bt_sortingByItemId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_sortingByItemIdActionPerformed(evt);
            }
        });

        bt_soritngByRating.setText("Sorting by rating");
        bt_soritngByRating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_soritngByRatingActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Statistics - measures of predicted items in evaluation mode"));

        tx_CFRunningTime.setBackground(new java.awt.Color(204, 204, 255));

        tx_TP_FP_FN_measures.setBackground(new java.awt.Color(204, 204, 255));
        tx_TP_FP_FN_measures.setToolTipText("<html>\n<body>\nUsing in Evaluation mode\n<br/>TP: correct selected items\n<br/>FN: Not correct not selected items\n<br/>FP: Not correct selected items\n</body>\n</html>");

        tx_precission_recall_F_measures.setBackground(new java.awt.Color(204, 204, 255));
        tx_precission_recall_F_measures.setToolTipText("<html>\n<body>\nUsing in Evaluation mode\n<br/>Precision = correct retrieved items/retrieved items \n<br/>Recall = correct retrieved items/correct tiems\n<br/>F-measure = 2PR/(P+R)\n</body>\n</html>");

        tx_MAE_RMSE.setBackground(new java.awt.Color(204, 204, 255));
        tx_MAE_RMSE.setToolTipText("<html>\n<body>\nUsing in Evaluation mode\n<br/>MAE: mean absolute error\n<br/>RMSE: root mean squered error\n</body>\n</html>");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tx_TP_FP_FN_measures)
                    .addComponent(tx_precission_recall_F_measures)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(tx_CFRunningTime, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tx_MAE_RMSE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tx_CFRunningTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tx_MAE_RMSE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tx_TP_FP_FN_measures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tx_precission_recall_F_measures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addComponent(bt_sortingByItemId, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bt_soritngByRating, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(tx_selectedUser, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(bt_next, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(bt_next)
                            .addComponent(tx_selectedUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_soritngByRating)
                    .addComponent(bt_sortingByItemId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        jScrollPane2.setViewportView(jPanel1);

        menu_convertRatingsFile.setText("File");
        menu_convertRatingsFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_convertRatingsFileMouseClicked(evt);
            }
        });

        jMenuItem2.setText("Next");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menu_convertRatingsFile.add(jMenuItem2);

        jMenuItem1.setText("Back");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menu_convertRatingsFile.add(jMenuItem1);
        menu_convertRatingsFile.add(jSeparator1);

        menu_exit.setText("Exit");
        menu_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_exitActionPerformed(evt);
            }
        });
        menu_convertRatingsFile.add(menu_exit);

        jMenuBar1.add(menu_convertRatingsFile);

        menu_about.setText("About");
        menu_about.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_aboutMouseClicked(evt);
            }
        });
        jMenuBar1.add(menu_about);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_modeApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_modeApplyActionPerformed
        applyRunningMode();
    }//GEN-LAST:event_bt_modeApplyActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        windowsOpeningAction();
    }//GEN-LAST:event_formWindowOpened

    private void cb_runningModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_runningModeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_runningModeActionPerformed

    private void menu_convertRatingsFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_convertRatingsFileMouseClicked

    }//GEN-LAST:event_menu_convertRatingsFileMouseClicked

    private void cb_itemsOfCFoutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_itemsOfCFoutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_itemsOfCFoutputActionPerformed

    private void bt_nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_nextActionPerformed
        this.nextButtonAction();
    }//GEN-LAST:event_bt_nextActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        StartForm a = new StartForm();
        this.dispose();
        a.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cb_popularityFactorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_popularityFactorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_popularityFactorActionPerformed

    private void bt_soritngByRatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_soritngByRatingActionPerformed
        printRatings(1);
    }//GEN-LAST:event_bt_soritngByRatingActionPerformed

    private void bt_sortingByItemIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_sortingByItemIdActionPerformed
        printRatings(0);
    }//GEN-LAST:event_bt_sortingByItemIdActionPerformed

    private void cb_minValueOfRatingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_minValueOfRatingsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_minValueOfRatingsActionPerformed

    private void cb_itemsForPackagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_itemsForPackagesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_itemsForPackagesActionPerformed

    private void menu_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_exitActionPerformed
        Object[] options = {"Yes", "Cancel"};
        Component frame = null;
        int n = JOptionPane.showOptionDialog(frame,
            "Are you sure you want to terminate the program?",
            "Exit",
            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
            null, options, options[0]);
        if (n == 0) {
            System.exit(0);
            //this.dispose();
        }
    }//GEN-LAST:event_menu_exitActionPerformed

    private void menu_aboutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_aboutMouseClicked
        Component frame = null;
        JOptionPane.showMessageDialog(frame, "PackageRecSys v1.0\nCopyright © Panagiotis Kouris , 2016\nHarokopio University of Athens (HUA)\nAll rights reserved", "About Software", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menu_aboutMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        StartForm a = new StartForm();
        this.dispose();
        a.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
         this.nextButtonAction();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    public void windowsOpeningAction() {
        this.cb_itemsOfCFoutput.setSelectedIndex(itemsOfCFoutput_selectedIndex);
        this.cb_itemsForPackages.setSelectedIndex(itemsForPackages_selectedIndex);
        this.cb_runningMode.setSelectedIndex(RunningModeForm.runningMode + 1); //runningMode = {-1, 0, 1, 10}
        this.cb_popularityFactor.setSelectedIndex(((int) popularityFactor));
        this.cb_minValueOfRatings.setSelectedIndex((int) minRatingOfHiddenItems);
        this.tx_selectedUser.setText("Selected UserId: " + StartForm.selectedUserID);
    }

    //It computes the precission and recall of the CF recommendations 
    //Correct items are the hidden items
    public void precisionAndRecallOfRecommendedItems() {
        int TP = 0; //correct selected items
        int FN = 0; //Not correct not selected items
        int FP = 0; //Not correct selected items
        int numOfPredictions = formsAndFunctionality.RunningModeForm.predictedItemRatingsWithPopularity_list.size();
        int FP_computation[] = new int[numOfPredictions];
        double meanAbsoluteError = 0.0; //mean absolute Error of concealed items
        double rootMeanSqueredError = 0.0; //Root Mean Squared Error (RMSE)
        //int countFormMinAbsErrory = 0;
        for (int i = 0; i < numOfPredictions; i++) {
            FP_computation[i] = 1; 
        }
        //int TN_perPackage[] = new int[numberOfPackages];

        //for each concealed item
        for (int i = 0; i < formsAndFunctionality.RunningModeForm.concealedItemRatings_list.size(); i++) {
            //computing the TP and FN
            int FN_flag = 1;
            for (int j = 0; j < numOfPredictions; j++) {
                if (RunningModeForm.concealedItemRatings_list.get(i).getItemID()
                        == formsAndFunctionality.RunningModeForm.predictedItemRatingsWithPopularity_list.get(j).getItemID()) {
                    TP++;
                    FP_computation[j] = 0;
                    FN_flag = 0;
                    double temp = (RunningModeForm.concealedItemRatings_list.get(i).getRating() - 
                            formsAndFunctionality.RunningModeForm.predictedItemRatingsWithPopularity_list.get(j).getRating());
                    if(temp < 0.0){
                        temp *= -1.0;
                    }
                    meanAbsoluteError += temp;
                    rootMeanSqueredError += (temp*temp);
                    break;
                }
            }
            FN += FN_flag;
        }

        //mean absolute Error of concealed items
        meanAbsoluteError = meanAbsoluteError/((double)TP);
        //Root Mean Squared Error (RMSE)
        rootMeanSqueredError = sqrt(rootMeanSqueredError/((double)TP));
                
                
        for (int i = 0; i < numOfPredictions; i++) {
            FP += FP_computation[i];
        }
        //precision = correct retrieved items/retrieved items
        double precision = (double) (((double) TP )/ (double) (TP + FP));
        //recall = correct retrieved items/correct tiems
        double recall = (double) ((double) TP / (double) (TP + FN));
        double F = 2*precision*recall/(precision+recall);
        /////////////////////
        //System.out.println("TP= " + TP + "   FN = "+FN + "   FP= " + FP +
         //       "   Precision" + precision + "   Recall" + recall);
        ///////////////////////
        this.tx_MAE_RMSE.setText("MAE = " + round(meanAbsoluteError,3) +
                "    RMSE = " + round(rootMeanSqueredError,3));
        this.tx_TP_FP_FN_measures.setText("TP = " + TP + "    FN = " + FN + "    FP = " + FP 
                );
        this.tx_precission_recall_F_measures.setText("Precision = " + round(precision,3) + 
                "    Recall = " + round(recall,3) +"    F = " + round(F,3));
    }



    public void concealingItemsAndRunningRecommender(double probabilityOfConcealedItems) {
        try {
            int numOfRatings = fileManagerClasses.ReadFiles.ratingsPerUser_hashTable.get(StartForm.selectedUserID).getNumOfRatings();
            int maxNumOfHiddenItems = (int) (probabilityOfConcealedItems* ((double) numOfRatings));
            probabilityOfConcealedItems = probabilityOfConcealedItems + minRatingOfHiddenItems/10.0 + 0.04;
            int countOfHiddenItems = 0;  

            BufferedReader bufferedReader = new BufferedReader(new FileReader(StartForm.ratingsDataFile));
            String ratingsDataFile_temp = StartForm.ratingsDataFile + "temp.dat";
            BufferedWriter bufferWriter = new BufferedWriter(new FileWriter(ratingsDataFile_temp));
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                String userId_str = "";
                //int index = 0;
                int len = line.length();
                for (int i = 0; i < len; i++) {
                    char c = line.charAt(i);
                    if (c == ',') {
                        break;
                    } else {
                        userId_str += c;
                    }
                }
                int userId = Integer.parseInt(userId_str.replaceAll("[\\D]", ""));//repalce non digit with blank
                if (userId == StartForm.selectedUserID) {
                    Random random = new Random();
                    //if the item is concealed (based on probability of concealing the items)

                    String[] part = new String[]{"", "", ""};
                    int countOfPart = 0;
                    for (int i = 0; i < len; i++) {
                        char c = line.charAt(i);
                        if (c == ',') {
                            countOfPart++;
                        } else if (countOfPart == 0) {
                            part[0] += c;
                        } else if (countOfPart == 1) {
                            part[1] += c;
                        } else if (countOfPart == 2) {
                            part[2] += c;
                        }
                    }
                    int itemId = Integer.parseInt(part[1].replaceAll("[\\D]", ""));
                    double rating = Double.parseDouble(part[2].replaceAll("[\\D]", ""));
                    if (random.nextDouble() < probabilityOfConcealedItems
                            && rating > (minRatingOfHiddenItems - 0.01)
                            && countOfHiddenItems < maxNumOfHiddenItems) {
                        // if (random.nextDouble() < probabilityOfConcealingItems && rating > 3.9) {
                        concealedItemRatings_list.add(new ItemRating(itemId, rating));
                        countOfHiddenItems++;
                        ////////////////
                        //System.out.println(countOfHiddenItems);
                        ////////////////
                    } else {
                        bufferWriter.write(line + "\n");
                    }
                } else {
                    bufferWriter.write(line + "\n");
                }

            }
            bufferedReader.close();
            bufferWriter.close();

            CollaborativeFiltering cf = new CollaborativeFiltering();
            predictedItemRatings_list = cf.itemBasedColFiltering(StartForm.selectedUserID, itemsOfCFoutput, ratingsDataFile_temp);
        } catch (IOException e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: concealingItemsAndRunningRecommender() " + e, "Message", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            Logger.getLogger(ReadFiles.class.getName()).log(Level.SEVERE, null, e);
            return;
        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: concealingItemsAndRunningRecommender() " + e, "Message", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            return;
        }
    }

    
    public void nextButtonAction() {
        try {
            runningMode = this.cb_runningMode.getSelectedIndex() - 1; //runningMode = {-1,0,1,... 10}
            runningMode_text = (String) this.cb_runningMode.getSelectedItem();
            //if applyRunningMode() has not been ran
            if (predictedItemRatingsWithPopularity_list == null || predictedItemRatingsWithPopularity_list.isEmpty()) {
                applyRunningMode();
                //if applyRunningMode() has been ran and runningMode has been changed.     
            } else if (runningMode != (this.cb_runningMode.getSelectedIndex() - 1)) {
                applyRunningMode();
            }
            ProblemModelingForm a = new ProblemModelingForm();
            this.dispose();
            a.setVisible(true);
        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: nextButtonAction() " + e, "Message", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
            return;
        }
    }

    
    //it applies the running mode
    public void applyRunningMode() {
        try {
            //this.tx_CFRunningTime.setText(" ");
            //this.tx_TP_FP_FN_measures.setText(" ");
            //this.tx_precission_recall_F_measures.setText(" ");
            //this.tx_MAE_RMSE.setText(" ");
            if ((this.cb_runningMode.getSelectedIndex() - 1) == -1) { //-1: running by using actual ratings (default value) 
                runningMode = this.cb_runningMode.getSelectedIndex() - 1;
                popularityFactor = this.cb_popularityFactor.getSelectedIndex();
                setNumOfRecommendations(); //set itemsForPackages and itemsOfCFoutput
                predictedItemRatings_list.clear();
                predictedItemRatingsWithPopularity_list.clear();
                concealedItemRatings_list.clear();
                //copy the list by using the temp_list
                List<ItemRating> temp_actualRatigns_list = fileManagerClasses.ReadFiles.ratingsPerUser_hashTable.get(StartForm.selectedUserID).getItemRatingList();
                List<ItemRating> temp_list = new ArrayList<>();
                for (int i = 0; i < temp_actualRatigns_list.size(); i++) {
                    ItemRating movieRating = new ItemRating(temp_actualRatigns_list.get(i).getItemID(), temp_actualRatigns_list.get(i).getRating());
                    temp_list.add(movieRating);
                    //System.out.println("actual rating = " + temp_actualRatigns_list.get(i).getRating()); 
                }
                
                predictedItemRatings_list = temp_list;
                this.setItemsForPackagesWithPopularity();
 
                predictedItemRatingsWithPopularity_list = temp_list;
                //precisionAndRecallOfRecommendedItems();
                printRatings(0); //print actual ratings sorted by rating value
            } else if ((this.cb_runningMode.getSelectedIndex() - 1) == 0) {  //0: running by using predicted ratings
                if (predictedItemRatings_list == null
                        || predictedItemRatings_list.isEmpty()
                        || runningMode != (this.cb_runningMode.getSelectedIndex() - 1)
                        || (int) minRatingOfHiddenItems != this.cb_minValueOfRatings.getSelectedIndex()
                        || itemsOfCFoutput_selectedIndex != this.cb_itemsOfCFoutput.getSelectedIndex()
                        || currentUserId != StartForm.selectedUserID) {
                    ///////////////////////
                   // System.out.println("runningMode = 0  if (predictedMovieRatings_list == null");
                    //////////////////////////
                    // static public List<MovieRating> predictedMovieRatingsWithPopularity_list = new ArrayList<MovieRating>();
                    currentUserId = StartForm.selectedUserID;
                    runningMode = this.cb_runningMode.getSelectedIndex() - 1;
                    minRatingOfHiddenItems = (double) this.cb_minValueOfRatings.getSelectedIndex();
                    itemsOfCFoutput_selectedIndex = this.cb_itemsOfCFoutput.getSelectedIndex();
                    popularityFactor = this.cb_popularityFactor.getSelectedIndex();
                    setNumOfRecommendations();
                    predictedItemRatings_list.clear();
                    predictedItemRatingsWithPopularity_list.clear();
                    concealedItemRatings_list.clear();
                    printWaitingMessage(tb_actualRatings, tb_predictedRatings, tb_concealedRatings);
                    long startTime = System.currentTimeMillis();
                    //collaborative filtering running
                    CollaborativeFiltering cf = new CollaborativeFiltering();
                    predictedItemRatings_list = cf.itemBasedColFiltering(StartForm.selectedUserID, itemsOfCFoutput, StartForm.ratingsDataFile);
                    this.tx_CFRunningTime.setText("CF Running Time: " + round(((System.currentTimeMillis() - startTime) / 1000.0), 2) + " sec");
                    
                    setItemsForPackagesWithPopularity();
                    
                   
                } else if (popularityFactor != this.cb_popularityFactor.getSelectedIndex()
                        || itemsForPackages_selectedIndex != this.cb_itemsForPackages.getSelectedIndex()) {
                     ///////////////////////
                    //System.out.println("runningMode = 0  else if (popularityFactor != this.cb_popularityFactor.getSelectedIndex()");
                    //////////////////////////
                    popularityFactor = this.cb_popularityFactor.getSelectedIndex();
                    setNumOfRecommendations();
                    
                    setItemsForPackagesWithPopularity();
                    
                }

               printRatings(0);//print actual and predicted ratings sorted by rating value 
                //this.setNumOfRecommendations();
                //////////////////////
                // System.out.println("numOfRecommendations= " + numOfRecommendations);
                /////////////////////

            } else if ((this.cb_runningMode.getSelectedIndex() - 1) > 0) {  //1: Evaluation by Concealing 10% - 100% of items
                if (predictedItemRatings_list == null
                        || predictedItemRatings_list.isEmpty()
                        || runningMode != (this.cb_runningMode.getSelectedIndex() - 1)
                        || (int) minRatingOfHiddenItems != this.cb_minValueOfRatings.getSelectedIndex()
                        || itemsOfCFoutput_selectedIndex != this.cb_itemsOfCFoutput.getSelectedIndex()
                        || currentUserId != StartForm.selectedUserID) {
                     ///////////////////////
                   // System.out.println("runningMode > 0  if (predictedMovieRatings_list == null");
                    //////////////////////////
                    currentUserId = StartForm.selectedUserID;
                    runningMode = this.cb_runningMode.getSelectedIndex() - 1;
                    minRatingOfHiddenItems = (double) this.cb_minValueOfRatings.getSelectedIndex();
                    itemsOfCFoutput_selectedIndex = this.cb_itemsOfCFoutput.getSelectedIndex();
                    minRatingOfHiddenItems = (double) this.cb_minValueOfRatings.getSelectedIndex();
                    popularityFactor = this.cb_popularityFactor.getSelectedIndex();
                    setNumOfRecommendations();
                    predictedItemRatings_list.clear();
                    predictedItemRatingsWithPopularity_list.clear();
                    concealedItemRatings_list.clear();
                    printWaitingMessage(tb_actualRatings, tb_predictedRatings, tb_concealedRatings);
                    long startTime = System.currentTimeMillis();
                    //collaborative filtering running
                    concealingItemsAndRunningRecommender(((((double) runningMode) / 10.0)));
                    //predictedMovieRatings_list = cf.itemBasedRecommender(StartForm.selectedUserID, itemsOfCFoutput, StartForm.ratingsDataFile);
                    this.tx_CFRunningTime.setText("CF Running Time: " + round(((System.currentTimeMillis() - startTime) / 1000.0), 2) + " sec");
                    //add the fraction of movie populartiy to estimated ratings
                    setItemsForPackagesWithPopularity();
                    
                    printRatings(0);//print actual and predicted ratings sorted by rating value 
                } else if (popularityFactor != this.cb_popularityFactor.getSelectedIndex()
                        || itemsForPackages_selectedIndex != this.cb_itemsForPackages.getSelectedIndex()) {
                     ///////////////////////
                    //System.out.println("runningMode > 0  else if");
                    //////////////////////////
                    setNumOfRecommendations();
                    
                    setItemsForPackagesWithPopularity();
                   
                }
                precisionAndRecallOfRecommendedItems();
                printRatings(0); //print ratings sorted by rating value
            }
        } catch (Exception e) {
            e.printStackTrace();
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: applyRunningMode() " + e, "Message", JOptionPane.WARNING_MESSAGE);
        }
    }

    
    //set items for creating packages with popularity of items to predictedMovieRatingsWithPopularity_list
    public void setItemsForPackagesWithPopularity(){
        try {
            double maxNewRating = 0.0;
           // double maxPredictedRating = 0.0;
            popularityFactor = this.cb_popularityFactor.getSelectedIndex();
            predictedItemRatingsWithPopularity_list.clear();
            itemsOfCFoutput = predictedItemRatings_list.size();
            if (itemsForPackages > itemsOfCFoutput) {
                itemsForPackages = itemsOfCFoutput;
                itemsForPackages_selectedIndex = itemsOfCFoutput_selectedIndex;
                this.cb_itemsForPackages.setSelectedIndex(itemsForPackages_selectedIndex);
            }
            //add the items for packages with the fraction of item populartiy to predictedMovieRatingsWithPopularity_list
            int numberOfUsers = ReadFiles.ratingsPerUser_hashTable.size();
            //for (MovieRating movieRating_temp : predictedMovieRatings_list) {
            for (int i = 0; i < itemsForPackages; i++) {
                ItemRating movieRating_temp;
                movieRating_temp = predictedItemRatings_list.get(i);
                int movieId = movieRating_temp.getItemID();
                double moviePopularityFraction = (double) ((double) ReadFiles.movies_hashTable.get(movieId).getPopularity()) / (double) numberOfUsers;
                //double predictedRating = movieRating_temp.getRating();
                double newRating = movieRating_temp.getRating() + popularityFactor * moviePopularityFraction;
                if(newRating > maxNewRating){
                    maxNewRating = newRating;
                }
              //  if(predictedRating > maxPredictedRating){
              //      maxPredictedRating = predictedRating;
              //  }
                predictedItemRatingsWithPopularity_list.add(new ItemRating(movieId, newRating));
            }
            
            //it normalizes the rating from 0 to 5
            if (maxNewRating > 5.0) {
                for (int i = 0; i < itemsForPackages; i++) {
                    double rating_temp = predictedItemRatingsWithPopularity_list.get(i).getRating();
                    //double normilizedRating = (rating_temp/maxNewRating)*maxPredictedRating;//normalized up to maxPredictedRating
                    double normilizedRating = (rating_temp/maxNewRating)*ReadFiles.maxValueOfRating; //
                    predictedItemRatingsWithPopularity_list.get(i).setRating(normilizedRating); 
                }
            }
            //////////////
            //System.out.println("ReadFiles.maxActualRating = " + ReadFiles.maxActualRating);
            //////////////
        } catch (Exception e) {
            e.printStackTrace();
        }
}
    
    
    //set the number of Mahout Collaborative filtering output items
    //set the number of items for packages
    public void setNumOfRecommendations() {
        itemsOfCFoutput_selectedIndex = this.cb_itemsOfCFoutput.getSelectedIndex();
        int numOfRatings = fileManagerClasses.ReadFiles.ratingsPerUser_hashTable.get(StartForm.selectedUserID).getNumOfRatings();
        int numOfItems = ReadFiles.movies_hashTable.size();
        int maxNumOfRecommendations = numOfItems - numOfRatings;
        if (runningMode == -1) { //using actual ratings
            itemsOfCFoutput = numOfRatings;
            itemsOfCFoutput_selectedIndex = 0;
            cb_itemsOfCFoutput.setSelectedIndex(itemsOfCFoutput_selectedIndex);
        } else {
            if (itemsOfCFoutput_selectedIndex == 0) { //100% of recommendations
                itemsOfCFoutput = maxNumOfRecommendations;
            }
            else {
                 itemsOfCFoutput = itemsOfCFoutput_selectedIndex * 100;
                if (itemsOfCFoutput > maxNumOfRecommendations) { //up to maximum Number Of Recommendations
                    itemsOfCFoutput = maxNumOfRecommendations;
                    //changing the selected index form comboBox
                    itemsOfCFoutput_selectedIndex = 0;
                    cb_itemsOfCFoutput.setSelectedIndex(itemsOfCFoutput_selectedIndex);
                }
            }
        }
        //set the number of Collaboritive filtering items for creating packages
        itemsForPackages_selectedIndex = this.cb_itemsForPackages.getSelectedIndex();
        itemsForPackages = itemsForPackages_selectedIndex * 100;
        if (itemsForPackages == 0) {
            itemsForPackages = itemsOfCFoutput;
        } else if (itemsForPackages > itemsOfCFoutput) {
            itemsForPackages = itemsOfCFoutput;
            itemsForPackages_selectedIndex = itemsOfCFoutput_selectedIndex;
            this.cb_itemsForPackages.setSelectedIndex(itemsForPackages_selectedIndex);
        }
        /////////////////
        //System.out.println("itemsOfCFoutput = " + itemsOfCFoutput );
        //System.out.println("itemsForPackages = " +itemsForPackages);
        ///////////////////////
    }

    
    //print the waiting message for collaborative filtering running
     public void printWaitingMessage(JTable tb_actualRatings, JTable tb_predictedRatings, JTable tb_concealedRatings) {
        int b = tb_actualRatings.getRowCount();
        for (int i = 0; i < b; i++) {
            ((DefaultTableModel) tb_actualRatings.getModel()).removeRow(0);
        }
        b = tb_predictedRatings.getRowCount();
        for (int i = 0; i < b; i++) {
            ((DefaultTableModel) tb_predictedRatings.getModel()).removeRow(0);
        }
        b = tb_concealedRatings.getRowCount();
        for (int i = 0; i < b; i++) {
            ((DefaultTableModel) tb_concealedRatings.getModel()).removeRow(0);
        }
        ((DefaultTableModel) tb_actualRatings.getModel()).addRow(new Object[]{" ", "Mahout CF running..."});
        ((DefaultTableModel) tb_actualRatings.getModel()).addRow(new Object[]{" ", "Please wait................"});
        ((DefaultTableModel) tb_predictedRatings.getModel()).addRow(new Object[]{" ", "Mahout CF running..."});
        ((DefaultTableModel) tb_predictedRatings.getModel()).addRow(new Object[]{" ", "Please wait................"});
        
        Component frame = null;
        JOptionPane.showMessageDialog(frame, "Collaborative Filtering will be run...\nPlease wait!", "Message", JOptionPane.NO_OPTION); 
    }
    
     
      public void printRatings(int sortingMode) {
        switch (runningMode) {
            case -1:
                {
                    //clear tables
                    int b = tb_predictedRatings.getRowCount();
                    for (int i = 0; i < b; i++) {
                        ((DefaultTableModel) tb_predictedRatings.getModel()).removeRow(0);
                    }       b = tb_concealedRatings.getRowCount();
                    for (int i = 0; i < b; i++) {
                        ((DefaultTableModel) tb_concealedRatings.getModel()).removeRow(0);
                    }  
                    //print
                    this.printActualRatings(sortingMode);
                    break;
                }
            case 0:
                {
                    //clear tables
                    int b = tb_concealedRatings.getRowCount();
                    for (int i = 0; i < b; i++) {
                        ((DefaultTableModel) tb_concealedRatings.getModel()).removeRow(0);
                    } 
                    //print
                    this.printActualRatings(sortingMode);
                    this.printPredictedRatings(sortingMode);
                    break;
                }
            default: //runningMode = 1
                //print
                this.printActualRatings(sortingMode);
                this.printPredictedRatings(sortingMode);
                this.printConcealedRatings(sortingMode);
                break;
        }
    }


    
    //it prints the actual ratigns of the selected user
    public void printActualRatings(int sortingMode) {
        try {
            int b = tb_actualRatings.getRowCount();
            for (int i = 0; i < b; i++) {
                ((DefaultTableModel) tb_actualRatings.getModel()).removeRow(0);
            }
            //List<MovieRating> actualMovieRatings_list = new ArrayList<>();
            List<ItemRating> actualMovieRatings_list = fileManagerClasses.ReadFiles.ratingsPerUser_hashTable.get(StartForm.selectedUserID).getItemRatingList();
            int len = actualMovieRatings_list.size();
            if (sortingMode == 0) {
                //sorting ascending based on itemId
                Collections.sort(actualMovieRatings_list, new Comparator<ItemRating>() {
                    public int compare(ItemRating o1, ItemRating o2) {
                        return o1.getItemID() - o2.getItemID();
                    }
                });
            } else {
                //sorting descending based on ratings
                Collections.sort(actualMovieRatings_list, new Comparator<ItemRating>() {
                    public int compare(ItemRating o1, ItemRating o2) {
                        return (int) (o2.getRating() * 100000.0 - o1.getRating() * 100000.0);
                    }
                });
            }
            for (int i = 0; i < len;) {
                String row_text = "";
                for (int j = 0; j < 10 && i < len; j++) {
                    row_text += "[" + actualMovieRatings_list.get(i).getItemID() + ", " + round(actualMovieRatings_list.get(i).getRating(), 2) + "]  ";
                    i++;
                }
                ((DefaultTableModel) tb_actualRatings.getModel()).addRow(new Object[]{i, row_text});
            }
        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: printActualRatings() " + e, "Message", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
            return;
        }
    }

    
    
    //it prints the actual ratigns of the selected user
    public void printPredictedRatings(int sortingMode) {
        try {
            int b = tb_predictedRatings.getRowCount();
            for (int i = 0; i < b; i++) {
                ((DefaultTableModel) tb_predictedRatings.getModel()).removeRow(0);
            }
            if (sortingMode == 0) {
                //sorting ascending based on itemId
                Collections.sort(predictedItemRatingsWithPopularity_list, new Comparator<ItemRating>() {
                    public int compare(ItemRating o1, ItemRating o2) {
                        return o1.getItemID() - o2.getItemID();
                    }
                });
            } else {
                //sorting descending based on ratings
                Collections.sort(predictedItemRatingsWithPopularity_list, new Comparator<ItemRating>() {
                    public int compare(ItemRating o1, ItemRating o2) {
                        return (int) (o2.getRating() * 100000.0 - o1.getRating() * 100000.0);
                    }
                });
            }
            int len = predictedItemRatingsWithPopularity_list.size();
            for (int i = 0; i < len;) {
                String row_text = "";
                for (int j = 0; j < 10 && i < len; j++) {
                    row_text += "[" + predictedItemRatingsWithPopularity_list.get(i).getItemID() + ", " + round(predictedItemRatingsWithPopularity_list.get(i).getRating(), 2) + "]  ";
                    i++;
                }
                ((DefaultTableModel) tb_predictedRatings.getModel()).addRow(new Object[]{i, row_text});
            }
        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: printPredinctedRatings() " + e, "Message", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
        }
    }

    
    //it prints the concealed ratigns of the selected user
    public void printConcealedRatings(int sortingMode) {
        try {
            int b = tb_concealedRatings.getRowCount();
            for (int i = 0; i < b; i++) {
                ((DefaultTableModel) tb_concealedRatings.getModel()).removeRow(0);
            }
            if (sortingMode == 0) {
                //sorting ascending based on itemId
                Collections.sort(concealedItemRatings_list, new Comparator<ItemRating>() {
                    public int compare(ItemRating o1, ItemRating o2) {
                        return o1.getItemID() - o2.getItemID();
                    }
                });
            } else {
                //sorting descending based on ratings
                Collections.sort(concealedItemRatings_list, new Comparator<ItemRating>() {
                    public int compare(ItemRating o1, ItemRating o2) {
                        return (int) (o2.getRating() * 100000.0 - o1.getRating() * 100000.0);
                    }
                });
            }
            int len = this.concealedItemRatings_list.size();
            for (int i = 0; i < len;) {
                String row_text = "";
                for (int j = 0; j < 10 && i < len; j++) {
                    row_text += "[" + concealedItemRatings_list.get(i).getItemID() + ", " + round(concealedItemRatings_list.get(i).getRating(), 2) + "]  ";
                    i++;
                }
                ((DefaultTableModel) tb_concealedRatings.getModel()).addRow(new Object[]{i, row_text});
            }
        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: printConcealedRatings() " + e, "Message", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
            return;
        }
    }


    
    
    
    //it rounds the double number in specific number of decimals
    public double round(double number, int decimals) {
        if (decimals < 0) {
            return number; //no change in number
        }
        long factor = (long) Math.pow(10, decimals);
        number = number * factor;
        long tmp = Math.round(number);
        return (double) tmp / factor;
    }

    
   /* 
    
    //set the value of numOfRecommendations for mahout recommender
    public void setNumOfRecommendations() {
        int selectedIndex = this.cb_recommendations.getSelectedIndex();
        int numOfRatings = fileManagerClasses.ReadFiles.ratingsPerUser_hashTable.get(StartForm.selectedUserID).getNumOfRatings();
        int numOfItems = ReadFiles.movies_hashTable.size();
        int maxNumOfRecommendations = numOfItems - numOfRatings;
        if(selectedIndex == 0){
        numOfRecommendations = maxNumOfRecommendations;
        
        }
        
        //Number of Recommendations:
        //100%, 1. 90%, 2. 80%, 3. 70%, 4. 60%, 5. 50%, 6. 40%, 7. 30%, 8. 20%, 9. 10%,
        //10. up to 100, 11. up to 200, 12. up to 400, 13. up to 800, 14. up to 1000,
        //15. up to 1500, 16.  up to 2000, 17.  up to 2500, 18.  up to 3000, 
        //19. up to 500 & up to 70%,  20. up to 800 & up to 70%, 21. up to 1000 & up to 70%
        switch (index) {
            case 0:
                numOfRecommendations = maxNumOfRecommendations;
                break;
            case 1:
                numOfRecommendations = (int) (maxNumOfRecommendations * 0.9);
                break;
            case 2:
                numOfRecommendations = (int) (maxNumOfRecommendations * 0.8);
                break;
            case 3:
                numOfRecommendations = (int) (maxNumOfRecommendations * 0.7);
                break;
            case 4:
                numOfRecommendations = (int) (maxNumOfRecommendations * 0.6);
                break;
            case 5:
                numOfRecommendations = (int) (maxNumOfRecommendations * 0.5);
                break;
            case 6:
                numOfRecommendations = (int) (maxNumOfRecommendations * 0.4);
                break;
            case 7:
                numOfRecommendations = (int) (maxNumOfRecommendations * 0.3);
                break;
            case 8:
                numOfRecommendations = (int) (maxNumOfRecommendations * 0.2);
                break;
            case 9:
                numOfRecommendations = (int) (maxNumOfRecommendations * 0.1);
                break;
            //10. up to 100, 11. up to 200, 12. up to 400, 13. up to 800, 14. up to 1000,
            //15. up to 1500, 16. up to 2000, 17. up to 2500, 18. up to 3000,     
            case 10:
                if (maxNumOfRecommendations > 100) {
                    numOfRecommendations = 100;
                } else {
                    numOfRecommendations = maxNumOfRecommendations;
                }
                break;
            case 11:
                if (maxNumOfRecommendations > 200) {
                    numOfRecommendations = 200;
                } else {
                    numOfRecommendations = maxNumOfRecommendations;
                }
                break;
            case 12:
                if (maxNumOfRecommendations > 400) {
                    numOfRecommendations = 400;
                } else {
                    numOfRecommendations = maxNumOfRecommendations;
                }
                break;
            case 13:
                if (maxNumOfRecommendations > 800) {
                    numOfRecommendations = 800;
                } else {
                    numOfRecommendations = maxNumOfRecommendations;
                }
                break;
            case 14:
                if (maxNumOfRecommendations > 1000) {
                    numOfRecommendations = 1000;
                } else {
                    numOfRecommendations = maxNumOfRecommendations;
                }
                break;
            case 15:
                if (maxNumOfRecommendations > 1500) {
                    numOfRecommendations = 1500;
                } else {
                    numOfRecommendations = maxNumOfRecommendations;
                }
                break;
            case 16:
                if (maxNumOfRecommendations > 2000) {
                    numOfRecommendations = 2000;
                } else {
                    numOfRecommendations = maxNumOfRecommendations;
                }
                break;
            case 17:
                if (maxNumOfRecommendations > 2500) {
                    numOfRecommendations = 2500;
                } else {
                    numOfRecommendations = maxNumOfRecommendations;
                }
                break;
            case 18:
                if (maxNumOfRecommendations > 3000) {
                    numOfRecommendations = 3000;
                } else {
                    numOfRecommendations = maxNumOfRecommendations;
                }
                break;
            //19. up to 500 & up to 70%,  20. up to 800 & up to 70%, 21. up to 1000 & up to 70%
            case 19:
                if (maxNumOfRecommendations * 0.7 > 500.0) {
                    numOfRecommendations = 500;
                } else {
                    numOfRecommendations = (int) (maxNumOfRecommendations * 0.7);
                }
                break;
            case 20:
                if (maxNumOfRecommendations * 0.7 > 800.0) {
                    numOfRecommendations = 800;
                } else {
                    numOfRecommendations = (int) (maxNumOfRecommendations * 0.7);
                }
                break;
            case 21:
                if (maxNumOfRecommendations * 0.7 > 1000.0) {
                    numOfRecommendations = 1000;
                } else {
                    numOfRecommendations = (int) (maxNumOfRecommendations * 0.7);
                }
                break;
            case 22:
                numOfRecommendations = 10;
                break;
            default:
                numOfRecommendations = maxNumOfRecommendations;
                break;
        }
    }
*/
   
   

    
/*
    public void concealingItemsAndRunningRecommender_old(double probabilityOfConcealingItems) {
        try {
            ///////////////////////////////
           // System.out.println("concealing items and running recommender" + System.nanoTime());
           // for(int i=0; i<100; i++){
          //      Random random = new Random();
           //     System.out.println(random.nextDouble());
          //  }
            /////////////////////////////////
            concealedMovieRatings_list.clear();
            predictedMovieRatings_list.clear();
            
            BufferedReader bufferedReader = new BufferedReader(new FileReader(StartForm.ratingsDataFile));
            String ratingsDataFile_temp = StartForm.ratingsDataFile + "temp.dat";
            BufferedWriter bufferWriter = new BufferedWriter(new FileWriter(ratingsDataFile_temp));
            String line;
            List<MovieRatingPopularity> userMovies_list = new ArrayList<>(); 
            
            while ((line = bufferedReader.readLine()) != null) {
                String userId_str = "";
                //int index = 0;
                int len = line.length();
                for (int i = 0; i < len; i++) {
                    char c = line.charAt(i);
                    if (c == ',') {
                        break;
                    } else {
                        userId_str += c;
                    }
                }
                int userId = Integer.parseInt(userId_str.replaceAll("[\\D]", ""));//repalce non digit with blank
                if (userId == StartForm.selectedUserID) {
                    //Random random = new Random();
                    //if the item is concealed (based on probability of concealing the items)

                    String[] part = new String[]{"", "", ""};
                    int countOfPart = 0;
                    for (int i = 0; i < len; i++) {
                        char c = line.charAt(i);
                        if (c == ',') {
                            countOfPart++;
                        } else if (countOfPart == 0) {
                            part[0] += c;
                        } else if (countOfPart == 1) {
                            part[1] += c;
                        } else if (countOfPart == 2) {
                            part[2] += c;
                        }
                    }
                    int itemId = Integer.parseInt(part[1].replaceAll("[\\D]", ""));
                    double rating = Double.parseDouble(part[2].replaceAll("[\\D]", ""));
                    int popularity = ReadFiles.movies_hashTable.get(itemId).getPopularity();
                    userMovies_list.add(new MovieRatingPopularity(itemId, rating, popularity));

                } else {
                    bufferWriter.write(line + "\n");
                }
            }

            //sorting desceding based on popularity of movies
            Collections.sort(userMovies_list, new Comparator<MovieRatingPopularity>() {
                public int compare(MovieRatingPopularity o1, MovieRatingPopularity o2) {
                    return o2.getPopularity() - o1.getPopularity();
                }
            });

            int numOfConcealedItems = (int) ((int) userMovies_list.size() * probabilityOfConcealingItems);
            for (int i = 0; i < userMovies_list.size(); i++) {
                // if (random.nextDouble() < probabilityOfConcealingItems) {
                if (i < numOfConcealedItems) {
                    // if (random.nextDouble() < probabilityOfConcealingItems && rating > 3.9) {

                    concealedMovieRatings_list.add(new MovieRating(userMovies_list.get(i).getMovieID(), userMovies_list.get(i).getRating()));

                } else {
                    bufferWriter.write(StartForm.selectedUserID + 
                            "," + userMovies_list.get(i).getMovieID() + 
                            "," + userMovies_list.get(i).getRating() + "\n");
                }

            }

            bufferedReader.close();
            bufferWriter.close();

            CollaborativeFiltering cf = new CollaborativeFiltering();
            predictedMovieRatings_list = cf.itemBasedRecommender(StartForm.selectedUserID, numOfRecommendations, ratingsDataFile_temp);
      
            
            //add the fraction of movie populartiy to estimated ratings
            int numberOfUsers = ReadFiles.ratingsPerUser_hashTable.size();
            for (int i = 0; i < predictedMovieRatings_list.size(); i++) {
                int movieId = predictedMovieRatings_list.get(i).getMovieID();
                double moviePopularityFraction = (double) ((double) ReadFiles.movies_hashTable.get(movieId).getPopularity()) / (double) numberOfUsers;
                double newRating = predictedMovieRatings_list.get(i).getRating() + moviePopularityFraction;
                predictedMovieRatings_list.get(i).setRating(newRating);
            }


            ///////////////////
          //  for (int i = 0; i < predictedMovieRatings_list.size(); i++) {
          //      System.out.println("Predicted Ratings:");
           //     System.out.println(predictedMovieRatings_list.get(i).getMovieID());
           // }
            ///////////////////

        } catch (IOException e) {
            Component frame = null;
            //JOptionPane.showMessageDialog(frame, "Select a valid rating file please! \nError: "+e, "Message", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(frame, "Error: " + e, "Message", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ReadFiles.class.getName()).log(Level.SEVERE, null, e);
            return;
        } catch (Exception e) {
            Component frame = null;
            //JOptionPane.showMessageDialog(frame, "Select a valid rating file please! \nError: "+e, "Message", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(frame, "Error: " + e, "Message", JOptionPane.ERROR_MESSAGE);
            System.out.println("ReadFiles.readRatings() Exception: " + e);
            return;
        }
    }
*/
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RunningModeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RunningModeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RunningModeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RunningModeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RunningModeForm().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_modeApply;
    private javax.swing.JButton bt_next;
    private javax.swing.JButton bt_soritngByRating;
    private javax.swing.JButton bt_sortingByItemId;
    private javax.swing.JComboBox<String> cb_itemsForPackages;
    private javax.swing.JComboBox<String> cb_itemsOfCFoutput;
    private javax.swing.JComboBox<String> cb_minValueOfRatings;
    private javax.swing.JComboBox<String> cb_popularityFactor;
    private javax.swing.JComboBox<String> cb_runningMode;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenu menu_about;
    private javax.swing.JMenu menu_convertRatingsFile;
    private javax.swing.JMenuItem menu_exit;
    private javax.swing.JTable tb_actualRatings;
    private javax.swing.JTable tb_concealedRatings;
    private javax.swing.JTable tb_predictedRatings;
    private javax.swing.JTextField tx_CFRunningTime;
    private javax.swing.JTextField tx_MAE_RMSE;
    private javax.swing.JTextField tx_TP_FP_FN_measures;
    private javax.swing.JTextField tx_precission_recall_F_measures;
    private javax.swing.JTextField tx_selectedUser;
    // End of variables declaration//GEN-END:variables
}
