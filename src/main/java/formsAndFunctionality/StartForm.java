package formsAndFunctionality;

import collaborativeFiltering.CFinWholeDataset;
import collaborativeFiltering.KFoldsCrossValidation;
import entityBasicClasses.Item;
import entityBasicClasses.ItemRating;
import fileManagerClasses.AddCostToItems;
import fileManagerClasses.ConvertFile;
import fileManagerClasses.ReadFiles;
import java.awt.Component;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import popularityApproach.EvaluationPopularityApproach;

/**
 * @author: Panagiotis Kouris date: Nov 2015
 */
public class StartForm extends javax.swing.JFrame {

    static public String lin_dataset = "/home/pkouris/Dropbox/EMP_DID_dropbox/PackageRecSys/Dataset/";
    static public String win_dataset = "E:/Dataset/";

    static public String dataset = win_dataset; //It should be changed according to pc
    static public int selectedUserID = 1;

    static String movielensDatafile = "m1m";
    static String animeDatafile = "anime";
   
    static public String datafile = movielensDatafile; //It should be changed according to the specific dataset
    
    static public String ratingsDataFile = dataset + "" + datafile + "/ratings_converted.dat"; //default value
    static public String itemsDataFile = dataset + "" + datafile + "/items_converted_withDuration.dat"; //default value
    static public String morePopularItemsDataFile = dataset + "" + datafile + "/items_morePopular.dat"; //default value
    //static public String ratingsDataFile = dataset + "anime/ratings_converted.dat"; //default value
    //static public String itemsDataFile = dataset + "anime/items_converted_withDuration.dat"; //default value
    //static public String morePopularItemsDataFile = dataset + "anime/items_morePopular.dat"; //default value

    
    
    
    
    static int minItemsPrint = 0;
    static int maxItemsPrint = 100;
    static int minRatingPrint = 0;
    static int maxRatingPrint = 100;

    /**
     * Creates new form StartForm
     */
    public StartForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        button_printAllRatings = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_Ratings = new javax.swing.JTable();
        button_printRatings = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        bt_sortRatingsByNumOfRatings = new javax.swing.JButton();
        bt_sortingRatingsByUserId = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        button_printAllMovies = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_movies = new javax.swing.JTable();
        button_printMovies = new javax.swing.JButton();
        bt_sortItemsByItemId = new javax.swing.JButton();
        bt_sortItemsByPopularity = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        bt_chooseMoviesFile = new javax.swing.JButton();
        bt_loadFiles = new javax.swing.JButton();
        tx_itemsFile = new javax.swing.JTextField();
        bt_chooseRatingFile = new javax.swing.JButton();
        tx_ratingsFile = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_file = new javax.swing.JMenu();
        menu_convertRatingsToMahoutFormat = new javax.swing.JMenuItem();
        menu_convertItemsFile = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menu_exit = new javax.swing.JMenuItem();
        addCostToItems = new javax.swing.JMenu();
        cfInWholeDataset = new javax.swing.JMenuItem();
        addCostToDatasetRandomly = new javax.swing.JMenuItem();
        kFoldsCrossValidation = new javax.swing.JMenuItem();
        writeFileWithUsersForEvaluation = new javax.swing.JMenuItem();
        addDurationToMovies = new javax.swing.JMenuItem();
        morePopularItems = new javax.swing.JCheckBoxMenuItem();
        ConvertAnimeRatingFile = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        Evaluation = new javax.swing.JMenuItem();
        EvaluationOfGreedyAlgorithm = new javax.swing.JMenuItem();
        EvaluationPopularityApproach = new javax.swing.JMenuItem();
        menu_about = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PackageRecSys");
        setSize(new java.awt.Dimension(900, 700));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Ratings per User"));

        button_printAllRatings.setText("3b. Print All Ratings");
        button_printAllRatings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_printAllRatingsActionPerformed(evt);
            }
        });

        jTable_Ratings.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserID", "Num Of Ratings", "Ratings: [itemId, rating]"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable_Ratings);
        if (jTable_Ratings.getColumnModel().getColumnCount() > 0) {
            jTable_Ratings.getColumnModel().getColumn(0).setMinWidth(70);
            jTable_Ratings.getColumnModel().getColumn(0).setPreferredWidth(70);
            jTable_Ratings.getColumnModel().getColumn(0).setMaxWidth(70);
            jTable_Ratings.getColumnModel().getColumn(1).setMinWidth(140);
            jTable_Ratings.getColumnModel().getColumn(1).setPreferredWidth(140);
            jTable_Ratings.getColumnModel().getColumn(1).setMaxWidth(140);
            jTable_Ratings.getColumnModel().getColumn(2).setMinWidth(580);
            jTable_Ratings.getColumnModel().getColumn(2).setPreferredWidth(580);
            jTable_Ratings.getColumnModel().getColumn(2).setMaxWidth(580);
        }

        button_printRatings.setText("3a. Print Ratings (per 100)");
        button_printRatings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_printRatingsActionPerformed(evt);
            }
        });

        jButton1.setText("6. Select user");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        bt_sortRatingsByNumOfRatings.setText("Sorting by number of ratings");
        bt_sortRatingsByNumOfRatings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_sortRatingsByNumOfRatingsActionPerformed(evt);
            }
        });

        bt_sortingRatingsByUserId.setText("Sorting by userId");
        bt_sortingRatingsByUserId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_sortingRatingsByUserIdActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(button_printRatings, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_printAllRatings, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bt_sortingRatingsByUserId, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_sortRatingsByNumOfRatings, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_printRatings)
                    .addComponent(button_printAllRatings)
                    .addComponent(bt_sortRatingsByNumOfRatings)
                    .addComponent(bt_sortingRatingsByUserId))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jButton1)))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Items"));

        button_printAllMovies.setText("4b. Print All Items");
        button_printAllMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_printAllMoviesActionPerformed(evt);
            }
        });

        jTable_movies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ItemId", "Max Appear.", "Popularity", "Title", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable_movies);
        if (jTable_movies.getColumnModel().getColumnCount() > 0) {
            jTable_movies.getColumnModel().getColumn(0).setPreferredWidth(70);
            jTable_movies.getColumnModel().getColumn(1).setMinWidth(100);
            jTable_movies.getColumnModel().getColumn(1).setPreferredWidth(100);
            jTable_movies.getColumnModel().getColumn(1).setMaxWidth(100);
            jTable_movies.getColumnModel().getColumn(2).setMinWidth(100);
            jTable_movies.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTable_movies.getColumnModel().getColumn(2).setMaxWidth(100);
            jTable_movies.getColumnModel().getColumn(3).setMinWidth(300);
            jTable_movies.getColumnModel().getColumn(3).setPreferredWidth(300);
            jTable_movies.getColumnModel().getColumn(3).setMaxWidth(300);
            jTable_movies.getColumnModel().getColumn(4).setPreferredWidth(350);
        }

        button_printMovies.setText("4a. Print Items (per 100)");
        button_printMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_printMoviesActionPerformed(evt);
            }
        });

        bt_sortItemsByItemId.setText("Sorting by ItemId");
        bt_sortItemsByItemId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_sortItemsByItemIdActionPerformed(evt);
            }
        });

        bt_sortItemsByPopularity.setText("Sorting by Items Popularity");
        bt_sortItemsByPopularity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_sortItemsByPopularityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(button_printMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(button_printAllMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bt_sortItemsByItemId, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bt_sortItemsByPopularity, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)))
                .addGap(134, 134, 134))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_printMovies)
                    .addComponent(button_printAllMovies)
                    .addComponent(bt_sortItemsByItemId)
                    .addComponent(bt_sortItemsByPopularity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Load Dataset"));

        bt_chooseMoviesFile.setText("1b. Choose Items DataFile");
        bt_chooseMoviesFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_chooseMoviesFileActionPerformed(evt);
            }
        });

        bt_loadFiles.setText("2. Load Files");
        bt_loadFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_loadFilesActionPerformed(evt);
            }
        });

        tx_itemsFile.setText("C:\\movie_datasets\\ml1m\\movies_converted.dat");
        tx_itemsFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_itemsFileActionPerformed(evt);
            }
        });

        bt_chooseRatingFile.setText("1a. Choose Ratings DataFile");
        bt_chooseRatingFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_chooseRatingFileActionPerformed(evt);
            }
        });

        tx_ratingsFile.setText("C:\\movie_datasets\\ml1m\\ratings_converted.dat");
        tx_ratingsFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_ratingsFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tx_ratingsFile)
                    .addComponent(tx_itemsFile, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bt_chooseMoviesFile, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_chooseRatingFile, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bt_loadFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(226, 226, 226))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bt_chooseRatingFile)
                            .addComponent(tx_ratingsFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tx_itemsFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bt_chooseMoviesFile)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(bt_loadFiles)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 947, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        jScrollPane2.setViewportView(jPanel1);

        menu_file.setText("File");
        menu_file.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_fileMouseClicked(evt);
            }
        });

        menu_convertRatingsToMahoutFormat.setText("Convert Ratings Data File");
        menu_convertRatingsToMahoutFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_convertRatingsToMahoutFormatActionPerformed(evt);
            }
        });
        menu_file.add(menu_convertRatingsToMahoutFormat);

        menu_convertItemsFile.setText("Convert Items Data File");
        menu_convertItemsFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_convertItemsFileActionPerformed(evt);
            }
        });
        menu_file.add(menu_convertItemsFile);
        menu_file.add(jSeparator1);

        menu_exit.setText("Exit");
        menu_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_exitActionPerformed(evt);
            }
        });
        menu_file.add(menu_exit);

        jMenuBar1.add(menu_file);

        addCostToItems.setText("Tools");

        cfInWholeDataset.setText("CF in Whole Dataset");
        cfInWholeDataset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cfInWholeDatasetActionPerformed(evt);
            }
        });
        addCostToItems.add(cfInWholeDataset);

        addCostToDatasetRandomly.setText("Add Cost to Items Randomly");
        addCostToDatasetRandomly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCostToDatasetRandomlyActionPerformed(evt);
            }
        });
        addCostToItems.add(addCostToDatasetRandomly);

        kFoldsCrossValidation.setText("Generate k-Folds Cross Validation");
        kFoldsCrossValidation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kFoldsCrossValidationActionPerformed(evt);
            }
        });
        addCostToItems.add(kFoldsCrossValidation);

        writeFileWithUsersForEvaluation.setText("Write file with users for evaluation");
        writeFileWithUsersForEvaluation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeFileWithUsersForEvaluationActionPerformed(evt);
            }
        });
        addCostToItems.add(writeFileWithUsersForEvaluation);

        addDurationToMovies.setText("Add duration to movies");
        addDurationToMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDurationToMoviesActionPerformed(evt);
            }
        });
        addCostToItems.add(addDurationToMovies);

        morePopularItems.setSelected(true);
        morePopularItems.setText("Write more popular items to file");
        morePopularItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                morePopularItemsActionPerformed(evt);
            }
        });
        addCostToItems.add(morePopularItems);

        ConvertAnimeRatingFile.setText("Convert Anime Ratings File");
        ConvertAnimeRatingFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertAnimeRatingFileActionPerformed(evt);
            }
        });
        addCostToItems.add(ConvertAnimeRatingFile);

        jMenuBar1.add(addCostToItems);

        jMenu1.setText("Evaluation");

        Evaluation.setText("Evaluation Optimal Approach");
        Evaluation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EvaluationActionPerformed(evt);
            }
        });
        jMenu1.add(Evaluation);

        EvaluationOfGreedyAlgorithm.setText("Evaluation Greedy Approach");
        EvaluationOfGreedyAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EvaluationOfGreedyAlgorithmActionPerformed(evt);
            }
        });
        jMenu1.add(EvaluationOfGreedyAlgorithm);

        EvaluationPopularityApproach.setText("Evaluation Popularity Approach");
        EvaluationPopularityApproach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EvaluationPopularityApproachActionPerformed(evt);
            }
        });
        jMenu1.add(EvaluationPopularityApproach);

        jMenuBar1.add(jMenu1);

        menu_about.setText("About");
        menu_about.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_aboutMouseClicked(evt);
            }
        });
        jMenuBar1.add(menu_about);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 986, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_chooseRatingFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_chooseRatingFileActionPerformed
        this.tx_ratingsFile.setText(chooseFile());
    }//GEN-LAST:event_bt_chooseRatingFileActionPerformed

    private void tx_ratingsFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_ratingsFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_ratingsFileActionPerformed

    private void tx_itemsFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_itemsFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_itemsFileActionPerformed

    private void bt_chooseMoviesFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_chooseMoviesFileActionPerformed
        this.tx_itemsFile.setText(chooseFile());
    }//GEN-LAST:event_bt_chooseMoviesFileActionPerformed

    private void bt_loadFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_loadFilesActionPerformed
        loadFilesButtonAction();
        // System.out.println("button ratings");
    }//GEN-LAST:event_bt_loadFilesActionPerformed

    private void button_printRatingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_printRatingsActionPerformed
        // ReadFiles rf = new ReadFiles();
        //this.jTextArea_ratingFile.append(rf.printRatings());
        this.printRatings();

    }//GEN-LAST:event_button_printRatingsActionPerformed

    private void button_printMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_printMoviesActionPerformed
        // ReadFiles rf = new ReadFiles();
        //this.jTextArea_moviesFile.append(rf.printMovies());
        this.printItems();
    }//GEN-LAST:event_button_printMoviesActionPerformed

    private void button_printAllRatingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_printAllRatingsActionPerformed
        this.printAllRatings();
    }//GEN-LAST:event_button_printAllRatingsActionPerformed

    private void button_printAllMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_printAllMoviesActionPerformed
        this.printAllMovies(0);
    }//GEN-LAST:event_button_printAllMoviesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        selectUserButtonAction();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        initialStaticValues();
        //this.cb_runningMode.setSelectedIndex(this.runningMode + 1); //runningMode = {-1, 0, 1, 10}
        this.tx_ratingsFile.setText(ratingsDataFile);
        this.tx_itemsFile.setText(itemsDataFile);
    }//GEN-LAST:event_formWindowOpened

    private void bt_sortRatingsByNumOfRatingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_sortRatingsByNumOfRatingsActionPerformed
        ReadFiles readFiles = new ReadFiles();
        readFiles.sortRatingsPerUserList(0);
        initialStaticValues();
        this.printRatings();
    }//GEN-LAST:event_bt_sortRatingsByNumOfRatingsActionPerformed

    private void menu_fileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_fileMouseClicked

    }//GEN-LAST:event_menu_fileMouseClicked

    private void menu_convertRatingsToMahoutFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_convertRatingsToMahoutFormatActionPerformed
        /////////////////// 
        // System.out.println("Convert...");
        ConvertFile convertFile = new ConvertFile();
        //convertFile.converRatignsFileToMahoutFormat(this.tx_ratingsFile.getText());
        ratingsDataFile = convertFile.converRatignsFile(this.tx_ratingsFile.getText());
        if (!ratingsDataFile.equals("")) {
            this.tx_ratingsFile.setText(ratingsDataFile);
        }
        //////////////
        // System.out.println("Converted");
    }//GEN-LAST:event_menu_convertRatingsToMahoutFormatActionPerformed

    private void bt_sortItemsByItemIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_sortItemsByItemIdActionPerformed
        printAllMovies(0);
    }//GEN-LAST:event_bt_sortItemsByItemIdActionPerformed

    private void bt_sortItemsByPopularityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_sortItemsByPopularityActionPerformed
        printAllMovies(1);
    }//GEN-LAST:event_bt_sortItemsByPopularityActionPerformed

    private void bt_sortingRatingsByUserIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_sortingRatingsByUserIdActionPerformed
        ReadFiles readFiles = new ReadFiles();
        readFiles.sortRatingsPerUserList(1);
        initialStaticValues();
        this.printRatings();
    }//GEN-LAST:event_bt_sortingRatingsByUserIdActionPerformed

    private void menu_convertItemsFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_convertItemsFileActionPerformed
        ConvertFile convertFile = new ConvertFile();
        //convertFile.converRatignsFileToMahoutFormat(this.tx_ratingsFile.getText());
        itemsDataFile = convertFile.converItemsFile(this.tx_itemsFile.getText());
        if (!itemsDataFile.equals("")) {
            this.tx_itemsFile.setText(itemsDataFile);
        }
    }//GEN-LAST:event_menu_convertItemsFileActionPerformed

    private void menu_aboutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_aboutMouseClicked
        Component frame = null;
        JOptionPane.showMessageDialog(frame, "PackageRecSys v1.0\nCopyright © Panagiotis Kouris, 2017\nNTUA and HUA\nAll rights reserved", "About Software", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menu_aboutMouseClicked

    private void menu_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_exitActionPerformed
        Object[] options = {"Yes", "Cancel"};
        Component frame = null;
        int n = JOptionPane.showOptionDialog(frame,
                "Are you sure you want to terminate the program?",
                "Exit",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                null, options, options[0]);
        if (n == 0) {
            System.exit(0);
            //this.dispose();
        }
    }//GEN-LAST:event_menu_exitActionPerformed

    private void cfInWholeDatasetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cfInWholeDatasetActionPerformed
        ratingsDataFile = this.tx_ratingsFile.getText();
        CFinWholeDataset cfwd = new CFinWholeDataset();
        cfwd.applyCollaborativeFiltering();
    }//GEN-LAST:event_cfInWholeDatasetActionPerformed

    private void addCostToDatasetRandomlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCostToDatasetRandomlyActionPerformed
        itemsDataFile = this.tx_itemsFile.getText();
        AddCostToItems acti = new AddCostToItems();
        acti.addCostToItemsRandomly(itemsDataFile, 60, 120);
    }//GEN-LAST:event_addCostToDatasetRandomlyActionPerformed

    private void kFoldsCrossValidationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kFoldsCrossValidationActionPerformed
        ratingsDataFile = this.tx_ratingsFile.getText();
        KFoldsCrossValidation kfcv = new KFoldsCrossValidation();
        kfcv.ProduceKFoldsRandomly(5, 40, 1000100, 12500);
    }//GEN-LAST:event_kFoldsCrossValidationActionPerformed

    private void EvaluationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EvaluationActionPerformed
        try {
            recommend_and_evaluation.F_Evaluation ev = new recommend_and_evaluation.F_Evaluation();
            ev.runEvaluation();
        } catch (IOException ex) {
            Logger.getLogger(StartForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EvaluationActionPerformed

    private void EvaluationOfGreedyAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EvaluationOfGreedyAlgorithmActionPerformed
        try {
            greedyApproach.EvaluationGreedyApproach evg = new greedyApproach.EvaluationGreedyApproach();
            evg.runEvaluation();
        } catch (IOException ex) {
            Logger.getLogger(StartForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EvaluationOfGreedyAlgorithmActionPerformed

    private void writeFileWithUsersForEvaluationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeFileWithUsersForEvaluationActionPerformed
        fileManagerClasses.ProduceFileWithUsersForEvaluation p = new fileManagerClasses.ProduceFileWithUsersForEvaluation();
        try {
            p.writeFileWithUserIdAndRatings();
        } catch (IOException ex) {
            Logger.getLogger(StartForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_writeFileWithUsersForEvaluationActionPerformed

    private void addDurationToMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDurationToMoviesActionPerformed
        fileManagerClasses.AddCostToItems a = new AddCostToItems();
        a.retrieveDurationOfMovies(dataset + "m1m/movies_converted_withoutYear.dat");
    }//GEN-LAST:event_addDurationToMoviesActionPerformed

    private void morePopularItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_morePopularItemsActionPerformed
        this.writeMorePopularItemsToFile();
    }//GEN-LAST:event_morePopularItemsActionPerformed

    private void EvaluationPopularityApproachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EvaluationPopularityApproachActionPerformed
        EvaluationPopularityApproach e = new EvaluationPopularityApproach();
        try {
            e.runEvaluation();
        } catch (IOException ex) {
            Logger.getLogger(StartForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EvaluationPopularityApproachActionPerformed

    private void ConvertAnimeRatingFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertAnimeRatingFileActionPerformed
        fileManagerClasses.ConvertFile c = new fileManagerClasses.ConvertFile();
        c.convertAnimeRatignsFile();
    }//GEN-LAST:event_ConvertAnimeRatingFileActionPerformed

    public void loadFilesButtonAction() {
        initialStaticValues();
        ratingsDataFile = this.tx_ratingsFile.getText();
        ReadFiles rf = new ReadFiles();
        rf.readItemsFile(this.tx_itemsFile.getText());
        rf.readRatingsFile(this.tx_ratingsFile.getText());
        this.printRatings();
        this.printAllMovies(0);
    }

    public void initialStaticValues() {
        selectedUserID = 0;
        minItemsPrint = 0;
        maxItemsPrint = 100;
        minRatingPrint = 0;
        maxRatingPrint = 100;
    }

    public void selectUserButtonAction() {
        int selectedRow = this.jTable_Ratings.getSelectedRow();
        if (selectedRow == -1) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Select an entry please", "Message", JOptionPane.INFORMATION_MESSAGE);
        } else {
            int selectedEtry = (int) jTable_Ratings.getValueAt(selectedRow, 0);
            Object[] options = {"Ok", "Cancel"};
            Component frame = null;
            int n = JOptionPane.showOptionDialog(frame,
                    "You have selected the entry with userID " + selectedEtry,
                    "Selected User",
                    JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
                    null, options, options[0]);
            if (n == 0) {
                selectedUserID = (int) jTable_Ratings.getModel().getValueAt(selectedRow, 0);
                RunningModeForm a = new RunningModeForm();
                this.dispose();
                a.setVisible(true);
            }
        }
    }

    //import file
    public String chooseFile() {
        JFileChooser chooser = new JFileChooser();
        JFrame frame = null;
        int returnVal = chooser.showOpenDialog(frame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            return selectedFile.getPath();
        }
        return null;
    }

    //It prints ratings Per User per 100 records
    public void printRatings() {
        try {
            Integer b = jTable_Ratings.getRowCount();
            for (int i = 0; i < b; i++) {
                ((DefaultTableModel) jTable_Ratings.getModel()).removeRow(0);
            }
            //int size = ReadFiles.ratingsPerUser_list.size();
            int count = 0;
            for (int i = 0; i < ReadFiles.ratingsPerUser_list.size(); i++) {
                count++;
                if (count > maxRatingPrint) {
                    minRatingPrint += 100;
                    maxRatingPrint += 100;
                    break;
                }
                if (count < minRatingPrint) {
                    //do nothing
                } else {
                    int userID = ReadFiles.ratingsPerUser_list.get(i).getUserID();
                    int numOfRatings = fileManagerClasses.ReadFiles.ratingsPerUser_list.get(i).getNumOfRatings();
                    //List<MovieRating> movieRatingsList = new ArrayList<MovieRating>();
                    List<ItemRating> movieRatingsList = fileManagerClasses.ReadFiles.ratingsPerUser_list.get(i).getItemRatingList();
                    String temp_text = "";

                    //Iterator<MovieRating> itr = movieRatingsList.iterator();
                    //while (itr.hasNext()) {
                    for (int r = 0; r < movieRatingsList.size(); r++) {
                        //MovieRating movieRating_temp = new MovieRating();
                        //MovieRating movieRating_temp = itr.next();
                        //temp_text += "[" + movieRating_temp.getMovieID() + ", " + movieRating_temp.getRating() + "] ";
                        temp_text += "[" + movieRatingsList.get(r).getItemID() + ", " + movieRatingsList.get(r).getRating() + "] ";
                    }
                    ((DefaultTableModel) jTable_Ratings.getModel()).addRow(new Object[]{userID, numOfRatings, temp_text});
                }
            }
            //return text;
        } catch (Exception e) {
            e.printStackTrace();
            //System.out.println("printRatings() Exception : " + e);
        }
    }

    public void printAllRatings() {
        //delete rows
        Integer b = jTable_Ratings.getRowCount();
        for (int i = 0; i < b; i++) {
            ((DefaultTableModel) jTable_Ratings.getModel()).removeRow(0);
        }
        for (int i = 0; i < ReadFiles.ratingsPerUser_list.size(); i++) {
            int userID = ReadFiles.ratingsPerUser_list.get(i).getUserID();
            int numOfRatings = fileManagerClasses.ReadFiles.ratingsPerUser_list.get(i).getNumOfRatings();
            List<ItemRating> movieRatingsList = new ArrayList<ItemRating>();
            movieRatingsList = ReadFiles.ratingsPerUser_list.get(i).getItemRatingList();
            String temp_text = "";
            Iterator<ItemRating> itr = movieRatingsList.iterator();
            while (itr.hasNext()) {
                ItemRating movieRating_temp = new ItemRating();
                movieRating_temp = itr.next();
                temp_text += "[" + movieRating_temp.getItemID() + ", " + movieRating_temp.getRating() + "] ";
            }
            ((DefaultTableModel) jTable_Ratings.getModel()).addRow(new Object[]{userID, numOfRatings, temp_text});
        }
    }

    public void writeMorePopularItemsToFile() {
        try {
            ReadFiles readFiles = new ReadFiles();
            readFiles.sortItemsList(1);
            BufferedWriter bufferWriter = new BufferedWriter(new FileWriter(morePopularItemsDataFile));
            int count = 0;
            double ratingBasedOnPopularity = 5.0;
            int maxPopularity = ReadFiles.movies_list.get(0).getPopularity();
            for (Item movie_temp : ReadFiles.movies_list) {
                int movieID = movie_temp.getItemID();
                int moviePopularity = movie_temp.getPopularity();
                //double movieRating = ratingBasedOnPopularity;
                double movieRating = ((double) moviePopularity / (double) maxPopularity) * 5.0;
                bufferWriter.write(movieID + "," + movieRating + "\n");
                ratingBasedOnPopularity -= 0.00125;
            }
            bufferWriter.close();
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }
    }

    //print items, sortingMode=0 -->sorting by movie Id, else --> sorting by item popularity
    public void printAllMovies(int sortingMode) {
        ReadFiles readFiles = new ReadFiles();
        readFiles.sortItemsList(sortingMode);
        //delete rows
        Integer b = jTable_movies.getRowCount();
        for (int i = 0; i < b; i++) {
            ((DefaultTableModel) jTable_movies.getModel()).removeRow(0);
        }
        //Enumeration<Integer> keys = fileManagerClasses.ReadFiles.movies_hashTable.keys();
        //while (keys.hasMoreElements()) {
        for (Item movie_temp : ReadFiles.movies_list) {
            int movieID = movie_temp.getItemID();
            int maxAppearancesPerMovie = movie_temp.getNumOfMaxAppearances();
            int moviePopularity = movie_temp.getPopularity();
            String title = movie_temp.getTitle();
            String[] genres = movie_temp.getCategories();
            //int numOfGenres = movie_temp.getNumOfGenres();
            String temp_text = "";
            for (String s : genres) {
                temp_text += s + ", ";
            }
            ((DefaultTableModel) jTable_movies.getModel()).addRow(new Object[]{movieID, maxAppearancesPerMovie, moviePopularity, title, temp_text});
        }
    }

    //it prints items per 100 records
    public void printItems() {
        Integer b = jTable_movies.getRowCount();
        for (int i = 0; i < b; i++) {
            ((DefaultTableModel) jTable_movies.getModel()).removeRow(0);
        }
        Enumeration<Integer> keys = fileManagerClasses.ReadFiles.movies_hashTable.keys();
        // String text = "";
        int count = 0;
        while (keys.hasMoreElements()) {
            count++;
            if (count > maxItemsPrint) {
                minItemsPrint += 100;
                maxItemsPrint += 100;
                break;
            }
            if (count < minItemsPrint) {
                keys.nextElement();
            } else {
                int key = keys.nextElement();
                int movieID = fileManagerClasses.ReadFiles.movies_hashTable.get(key).getItemID();
                int maxAppearancesPerMovie = fileManagerClasses.ReadFiles.movies_hashTable.get(key).getNumOfMaxAppearances();
                int moviePopularity = fileManagerClasses.ReadFiles.movies_hashTable.get(key).getPopularity();
                String title = fileManagerClasses.ReadFiles.movies_hashTable.get(key).getTitle();
                String[] genres = fileManagerClasses.ReadFiles.movies_hashTable.get(key).getCategories();
                //int numOfGenres = fileManagerClasses.ReadFiles.movies_hashTable.get(key).getNumOfGenres();
                String temp_text = "";
                //////////////////////////////print
                // text += movieID + ": " + title + " : " + numOfGenres;
                //////////////
                // System.out.print( movieID + ": " + title + " " + numOfGenres);
                for (String s : genres) {
                    temp_text += s + ", ";
                    /////////////
                    //System.out.print(" " + s);
                }
                ((DefaultTableModel) jTable_movies.getModel()).addRow(new Object[]{movieID, maxAppearancesPerMovie, moviePopularity, title, temp_text});
                //text += "\n";
                ////////////
                //System.out.println();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StartForm().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ConvertAnimeRatingFile;
    private javax.swing.JMenuItem Evaluation;
    private javax.swing.JMenuItem EvaluationOfGreedyAlgorithm;
    private javax.swing.JMenuItem EvaluationPopularityApproach;
    private javax.swing.JMenuItem addCostToDatasetRandomly;
    private javax.swing.JMenu addCostToItems;
    private javax.swing.JMenuItem addDurationToMovies;
    private javax.swing.JButton bt_chooseMoviesFile;
    private javax.swing.JButton bt_chooseRatingFile;
    private javax.swing.JButton bt_loadFiles;
    private javax.swing.JButton bt_sortItemsByItemId;
    private javax.swing.JButton bt_sortItemsByPopularity;
    private javax.swing.JButton bt_sortRatingsByNumOfRatings;
    private javax.swing.JButton bt_sortingRatingsByUserId;
    private javax.swing.JButton button_printAllMovies;
    private javax.swing.JButton button_printAllRatings;
    private javax.swing.JButton button_printMovies;
    private javax.swing.JButton button_printRatings;
    private javax.swing.JMenuItem cfInWholeDataset;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable_Ratings;
    private javax.swing.JTable jTable_movies;
    private javax.swing.JMenuItem kFoldsCrossValidation;
    private javax.swing.JMenu menu_about;
    private javax.swing.JMenuItem menu_convertItemsFile;
    private javax.swing.JMenuItem menu_convertRatingsToMahoutFormat;
    private javax.swing.JMenuItem menu_exit;
    private javax.swing.JMenu menu_file;
    private javax.swing.JCheckBoxMenuItem morePopularItems;
    private javax.swing.JTextField tx_itemsFile;
    private javax.swing.JTextField tx_ratingsFile;
    private javax.swing.JMenuItem writeFileWithUsersForEvaluation;
    // End of variables declaration//GEN-END:variables
}
