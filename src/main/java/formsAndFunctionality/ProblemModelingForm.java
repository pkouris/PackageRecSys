package formsAndFunctionality;

import entityBasicClasses.CategoryPopularityOverallRating;
import entityBasicClasses.Item;
import entityBasicClasses.ItemRating;
import fileManagerClasses.ReadFiles;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import entityGraphClasses.EdgeCategorySink;
import entityGraphClasses.EdgeItemCategory;
import entityGraphClasses.EdgeItemSource;
import entityGraphClasses.EdgeSinkSource;
import entityGraphClasses.VertexCategory;
import entityGraphClasses.VertexItem;
import entityGraphClasses.VertexSink;
import entityGraphClasses.VertexSource;
import java.awt.Component;
import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 * @author: Panagiotis Kouris date: Nov 2015
 */
public class ProblemModelingForm extends javax.swing.JFrame {

    static public List<VertexItem> vertexItem_list = new ArrayList<>();
    static public List<VertexCategory> vertexCategory_list = new ArrayList<>();

    static public List<VertexCategory> vertexTopCategory_list = new ArrayList<>();
    static public List<VertexItem> vertexItemOfTopCategories_list = new ArrayList<>();

    //static public List<VertexCategory> vertexCategoryHidden_list = new ArrayList<>();
    //static public List<VertexItem> vertexItemHedden_list = new ArrayList<>();

    static public List<CategoryPopularityOverallRating> categoriesPopularity_list = new ArrayList<>();

    static public int numOfTopCategories = 4; //it can change via user interface, default value is 4
    static public int numOfPackages = 1;
    static public int numOfItemsPerCategory = 1;
    static public int numOfMaxAppearancesPerItem = -1; //-1:it is not taken into account, 0: read from file, 1,2,3...: it appears 1 or 2 ... times  
    static public int modelOfCreatingPackages = 1;
    static public VertexSource vertexSource;
    static public VertexSink vertexSink;
    static public Integer[] itemsAllocationToCategories = null;
    static public int categoryPopularity_mode = 0;
    static public String categoryPopularity_mode_str = "Based on the number of items per category";
    static public int packageSize = 0;

    /**
     * Creates new form ProblemModelForm
     */
    public ProblemModelingForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane7 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        bt_back1 = new javax.swing.JButton();
        bt_back2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        cb_numOfPackages = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cb_numOfCategories = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cb_numOfItemsPerCategory = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        cb_maxAppearancesPerMovie = new javax.swing.JComboBox();
        cb_modelOfCreatingPackages = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        bt_itemsAllocation = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        cb_categoryPopularityMode = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cb_packageSize = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        bt_runMinCostFlow = new javax.swing.JButton();
        bt_createGraph = new javax.swing.JButton();
        bt_loadTopCategoryNodes = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb_categoryNodes = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tb_sourceNode = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tb_sinkNode = new javax.swing.JTable();
        tx_selectedUser = new javax.swing.JTextField();
        tx_runningMode = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tb_movieNodes = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menu_exit = new javax.swing.JMenuItem();
        menu_about = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PackageRecSys");
        setSize(new java.awt.Dimension(900, 700));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        bt_back1.setText("Back");
        bt_back1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_back1ActionPerformed(evt);
            }
        });

        bt_back2.setText("Back");
        bt_back2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_back2ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));

        cb_numOfPackages.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60" }));
        cb_numOfPackages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_numOfPackagesActionPerformed(evt);
            }
        });

        jLabel1.setText("Number of Categories (nc):");

        jLabel9.setText("Items per Category: (ni/c)");

        cb_numOfCategories.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        cb_numOfCategories.setSelectedIndex(3);
        cb_numOfCategories.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_numOfCategoriesItemStateChanged(evt);
            }
        });
        cb_numOfCategories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cb_numOfCategoriesMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cb_numOfCategoriesMousePressed(evt);
            }
        });
        cb_numOfCategories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_numOfCategoriesActionPerformed(evt);
            }
        });

        jLabel8.setText("Number of Packages (N):");

        cb_numOfItemsPerCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Proportional", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30" }));
        cb_numOfItemsPerCategory.setSelectedIndex(1);
        cb_numOfItemsPerCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_numOfItemsPerCategoryActionPerformed(evt);
            }
        });

        jLabel10.setText("Maximum Appearances/Item:");

        cb_maxAppearancesPerMovie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Not Taken Account", "Reading from items file", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));
        cb_maxAppearancesPerMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_maxAppearancesPerMovieActionPerformed(evt);
            }
        });

        cb_modelOfCreatingPackages.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1. Removing the Edge with Maximum Rating", "2. Removing the Edge with Minimum Rating", "3. Removing the Top 50% Rated Edges", "4. Removing the Bottom 50% Rated Edges", "5. Removing All (100%) the Edges", "6. Distinct Packages - Removing the Item Nodes" }));
        cb_modelOfCreatingPackages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_modelOfCreatingPackagesActionPerformed(evt);
            }
        });

        jLabel16.setText("Model of Creating Packages");

        bt_itemsAllocation.setText("Items Allocation to Categories");
        bt_itemsAllocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_itemsAllocationActionPerformed(evt);
            }
        });

        jLabel17.setText("Category Popularity Mode:");

        cb_categoryPopularityMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1. Based on the number of items per category", "2. Based on the value of overall ratings per category", "3. Based on the number of predicted items per category" }));
        cb_categoryPopularityMode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_categoryPopularityModeItemStateChanged(evt);
            }
        });
        cb_categoryPopularityMode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cb_categoryPopularityModeMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cb_categoryPopularityModeMousePressed(evt);
            }
        });
        cb_categoryPopularityMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_categoryPopularityModeActionPerformed(evt);
            }
        });

        jLabel2.setText("Package Size:");

        cb_packageSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50" }));
        cb_packageSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_packageSizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cb_categoryPopularityMode, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cb_modelOfCreatingPackages, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cb_numOfPackages, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cb_maxAppearancesPerMovie, 0, 148, Short.MAX_VALUE)
                            .addComponent(cb_numOfCategories, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cb_numOfItemsPerCategory, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cb_packageSize, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(bt_itemsAllocation, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_numOfPackages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cb_numOfCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cb_packageSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cb_numOfItemsPerCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_itemsAllocation))
                .addGap(1, 1, 1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cb_maxAppearancesPerMovie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cb_modelOfCreatingPackages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cb_categoryPopularityMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        bt_runMinCostFlow.setText("3. Run Min Cost Flow Algorithm");
        bt_runMinCostFlow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_runMinCostFlowActionPerformed(evt);
            }
        });

        bt_createGraph.setText("1. Load Graph");
        bt_createGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_createGraphActionPerformed(evt);
            }
        });

        bt_loadTopCategoryNodes.setText("2. Load Graph with Top-N Categories");
        bt_loadTopCategoryNodes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_loadTopCategoryNodesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bt_loadTopCategoryNodes, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_createGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bt_runMinCostFlow, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bt_createGraph)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bt_loadTopCategoryNodes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bt_runMinCostFlow)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Category Nodes"));

        jScrollPane2.setAutoscrolls(true);

        tb_categoryNodes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "no", "Category", "Items/Category", "Category-Sink:[cost, maxFlow, minFlow]", "Category-Item Edges: [itemId, rating, cost, maxFlow, minFlow]"
            }
        ));
        jScrollPane2.setViewportView(tb_categoryNodes);
        if (tb_categoryNodes.getColumnModel().getColumnCount() > 0) {
            tb_categoryNodes.getColumnModel().getColumn(0).setMinWidth(40);
            tb_categoryNodes.getColumnModel().getColumn(0).setPreferredWidth(40);
            tb_categoryNodes.getColumnModel().getColumn(0).setMaxWidth(40);
            tb_categoryNodes.getColumnModel().getColumn(1).setMinWidth(70);
            tb_categoryNodes.getColumnModel().getColumn(1).setPreferredWidth(70);
            tb_categoryNodes.getColumnModel().getColumn(1).setMaxWidth(70);
            tb_categoryNodes.getColumnModel().getColumn(2).setMinWidth(130);
            tb_categoryNodes.getColumnModel().getColumn(2).setPreferredWidth(130);
            tb_categoryNodes.getColumnModel().getColumn(2).setMaxWidth(130);
            tb_categoryNodes.getColumnModel().getColumn(3).setMinWidth(230);
            tb_categoryNodes.getColumnModel().getColumn(3).setPreferredWidth(230);
            tb_categoryNodes.getColumnModel().getColumn(3).setMaxWidth(230);
            tb_categoryNodes.getColumnModel().getColumn(4).setMinWidth(420);
            tb_categoryNodes.getColumnModel().getColumn(4).setPreferredWidth(420);
            tb_categoryNodes.getColumnModel().getColumn(4).setMaxWidth(420);
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 868, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Source Node"));

        tb_sourceNode.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Source-Sink Edge: [cost, maxFlow, minFlow]", "Source-Items Edges: [itemId, cost, maxFlow, minFlow]"
            }
        ));
        jScrollPane4.setViewportView(tb_sourceNode);
        if (tb_sourceNode.getColumnModel().getColumnCount() > 0) {
            tb_sourceNode.getColumnModel().getColumn(0).setMinWidth(300);
            tb_sourceNode.getColumnModel().getColumn(0).setPreferredWidth(300);
            tb_sourceNode.getColumnModel().getColumn(0).setMaxWidth(300);
            tb_sourceNode.getColumnModel().getColumn(1).setMinWidth(600);
            tb_sourceNode.getColumnModel().getColumn(1).setPreferredWidth(600);
            tb_sourceNode.getColumnModel().getColumn(1).setMaxWidth(600);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Sink Node"));

        tb_sinkNode.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Source-Sink Edge: [cost, maxFlow, minFlow]", "Source-Items Edges: [itemId, cost, maxFlow, minFlow]"
            }
        ));
        jScrollPane8.setViewportView(tb_sinkNode);
        if (tb_sinkNode.getColumnModel().getColumnCount() > 0) {
            tb_sinkNode.getColumnModel().getColumn(0).setMinWidth(300);
            tb_sinkNode.getColumnModel().getColumn(0).setPreferredWidth(300);
            tb_sinkNode.getColumnModel().getColumn(0).setMaxWidth(300);
            tb_sinkNode.getColumnModel().getColumn(1).setMinWidth(600);
            tb_sinkNode.getColumnModel().getColumn(1).setPreferredWidth(600);
            tb_sinkNode.getColumnModel().getColumn(1).setMaxWidth(600);
        }

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 867, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );

        tx_selectedUser.setBackground(new java.awt.Color(204, 204, 255));
        tx_selectedUser.setText("Selected UserID: ");

        tx_runningMode.setBackground(new java.awt.Color(204, 204, 255));
        tx_runningMode.setText("Running Mode: ");
        tx_runningMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tx_runningModeActionPerformed(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Nodes"));

        tb_movieNodes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "no", "ItemId", "Item-Source:[cost, maxFlow, minflow]", "Item-Category Edges: [category, rating, cost, maxFlow, minflow]"
            }
        ));
        jScrollPane3.setViewportView(tb_movieNodes);
        if (tb_movieNodes.getColumnModel().getColumnCount() > 0) {
            tb_movieNodes.getColumnModel().getColumn(0).setMinWidth(40);
            tb_movieNodes.getColumnModel().getColumn(0).setPreferredWidth(40);
            tb_movieNodes.getColumnModel().getColumn(0).setMaxWidth(40);
            tb_movieNodes.getColumnModel().getColumn(1).setMinWidth(60);
            tb_movieNodes.getColumnModel().getColumn(1).setPreferredWidth(60);
            tb_movieNodes.getColumnModel().getColumn(1).setMaxWidth(60);
            tb_movieNodes.getColumnModel().getColumn(2).setMinWidth(220);
            tb_movieNodes.getColumnModel().getColumn(2).setPreferredWidth(220);
            tb_movieNodes.getColumnModel().getColumn(2).setMaxWidth(220);
            tb_movieNodes.getColumnModel().getColumn(3).setPreferredWidth(400);
        }

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 878, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(bt_back2)
                        .addGap(90, 90, 90))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(tx_selectedUser, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                                            .addComponent(bt_back1))
                                        .addComponent(tx_runningMode))
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)))
                        .addContainerGap(52, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tx_selectedUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bt_back1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tx_runningMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bt_back2)
                .addGap(12, 12, 12))
        );

        jScrollPane7.setViewportView(jPanel1);

        jMenu1.setText("File");

        jMenuItem1.setText("Back");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator1);

        menu_exit.setText("Exit");
        menu_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_exitActionPerformed(evt);
            }
        });
        jMenu1.add(menu_exit);

        jMenuBar1.add(jMenu1);

        menu_about.setText("About");
        menu_about.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menu_aboutMouseClicked(evt);
            }
        });
        jMenuBar1.add(menu_about);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_createGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_createGraphActionPerformed
        this.loadGraph();
    }//GEN-LAST:event_bt_createGraphActionPerformed

    private void bt_back2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_back2ActionPerformed
        RunningModeForm a = new RunningModeForm();
        this.dispose();
        a.setVisible(true);
    }//GEN-LAST:event_bt_back2ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        openingWindowAction();
    }//GEN-LAST:event_formWindowOpened

    private void bt_loadTopCategoryNodesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_loadTopCategoryNodesActionPerformed
        //this.numOfTopCategories = this.cb_numOfCategories.getSelectedIndex()+1; //this index starts from 0
        //this.numOfItemsPerCategory = this.cb_numOfItemsPerCategory.getSelectedIndex(); //this index starts form 1
        //System.out.println(this.cb_numOfCategories.getSelectedIndex()+1);
        this.loadGraphOfTopCategories();
        //printTopCategoryNodes();
    }//GEN-LAST:event_bt_loadTopCategoryNodesActionPerformed

    private void bt_back1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_back1ActionPerformed
        RunningModeForm a = new RunningModeForm();
        this.dispose();
        a.setVisible(true);
    }//GEN-LAST:event_bt_back1ActionPerformed

    private void bt_runMinCostFlowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_runMinCostFlowActionPerformed
        this.loadGraphOfTopCategories();
        ProblemSolutionNPackagesForm a = new ProblemSolutionNPackagesForm();
        this.dispose();
        a.setVisible(true);
    }//GEN-LAST:event_bt_runMinCostFlowActionPerformed

    private void cb_numOfCategoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_numOfCategoriesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_numOfCategoriesActionPerformed

    private void cb_numOfPackagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_numOfPackagesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_numOfPackagesActionPerformed

    private void cb_numOfItemsPerCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_numOfItemsPerCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_numOfItemsPerCategoryActionPerformed

    private void cb_maxAppearancesPerMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_maxAppearancesPerMovieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_maxAppearancesPerMovieActionPerformed

    private void cb_modelOfCreatingPackagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_modelOfCreatingPackagesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_modelOfCreatingPackagesActionPerformed

    private void bt_itemsAllocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_itemsAllocationActionPerformed
        loadGraphOfTopCategories();
        formsAndFunctionality.ItemsAllocationToCategoriesForm a = new ItemsAllocationToCategoriesForm();
        this.dispose();
        a.setVisible(true);
    }//GEN-LAST:event_bt_itemsAllocationActionPerformed

    private void cb_numOfCategoriesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_numOfCategoriesItemStateChanged
        // if (ProblemModelingForm.numOfItemsPerCategory == 0) {
        //     ProblemModelingForm.numOfItemsPerCategory = 1;
        //     this.cb_numOfItemsPerCategory.setSelectedIndex(numOfItemsPerCategory);
        // }
    }//GEN-LAST:event_cb_numOfCategoriesItemStateChanged

    private void tx_runningModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tx_runningModeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tx_runningModeActionPerformed

    private void cb_categoryPopularityModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_categoryPopularityModeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_categoryPopularityModeActionPerformed

    private void cb_categoryPopularityModeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_categoryPopularityModeItemStateChanged

    }//GEN-LAST:event_cb_categoryPopularityModeItemStateChanged

    private void cb_categoryPopularityModeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cb_categoryPopularityModeMouseExited

    }//GEN-LAST:event_cb_categoryPopularityModeMouseExited

    private void cb_numOfCategoriesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cb_numOfCategoriesMouseExited

    }//GEN-LAST:event_cb_numOfCategoriesMouseExited

    private void cb_numOfCategoriesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cb_numOfCategoriesMousePressed
        if (ProblemModelingForm.numOfItemsPerCategory == 0) {
            ProblemModelingForm.numOfItemsPerCategory = 1;
            this.cb_numOfItemsPerCategory.setSelectedIndex(numOfItemsPerCategory);
        }
    }//GEN-LAST:event_cb_numOfCategoriesMousePressed

    private void cb_categoryPopularityModeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cb_categoryPopularityModeMousePressed
        if (ProblemModelingForm.numOfItemsPerCategory == 0) {
            ProblemModelingForm.numOfItemsPerCategory = 1;
            this.cb_numOfItemsPerCategory.setSelectedIndex(numOfItemsPerCategory);
        }
    }//GEN-LAST:event_cb_categoryPopularityModeMousePressed

    private void menu_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_exitActionPerformed
        Object[] options = {"Yes", "Cancel"};
        Component frame = null;
        int n = JOptionPane.showOptionDialog(frame,
                "Are you sure you want to terminate the program?",
                "Exit",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                null, options, options[0]);
        if (n == 0) {
            System.exit(0);
            //this.dispose();
        }
    }//GEN-LAST:event_menu_exitActionPerformed

    private void menu_aboutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menu_aboutMouseClicked
        Component frame = null;
        JOptionPane.showMessageDialog(frame, "PackageRecSys v1.0\nCopyright © Panagiotis Kouris , 2016\nHarokopio University of Athens (HUA)\nAll rights reserved", "About Software", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menu_aboutMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        RunningModeForm a = new RunningModeForm();
        this.dispose();
        a.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void cb_packageSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_packageSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb_packageSizeActionPerformed

    public void openingWindowAction() {
        this.tx_selectedUser.setText("Selected UserID: " + StartForm.selectedUserID);
        this.tx_runningMode.setText("Running Mode: " + RunningModeForm.runningMode_text);
        this.cb_numOfPackages.setSelectedIndex(ProblemModelingForm.numOfPackages - 1);
        this.cb_numOfCategories.setSelectedIndex(ProblemModelingForm.numOfTopCategories - 1);
        this.cb_numOfItemsPerCategory.setSelectedIndex(ProblemModelingForm.numOfItemsPerCategory);
        this.cb_modelOfCreatingPackages.setSelectedIndex(ProblemModelingForm.modelOfCreatingPackages - 1);
        this.cb_maxAppearancesPerMovie.setSelectedIndex(ProblemModelingForm.numOfMaxAppearancesPerItem + 1);
        this.cb_categoryPopularityMode.setSelectedIndex(categoryPopularity_mode);
        this.cb_packageSize.setSelectedIndex(packageSize);
    }

    public void loadGraph() {
        try {

            ProblemModelingForm.numOfTopCategories = this.cb_numOfCategories.getSelectedIndex() + 1;
            ProblemModelingForm.numOfItemsPerCategory = this.cb_numOfItemsPerCategory.getSelectedIndex(); //this index starts form 1
            ProblemModelingForm.numOfPackages = this.cb_numOfPackages.getSelectedIndex() + 1;
            ProblemModelingForm.modelOfCreatingPackages = this.cb_modelOfCreatingPackages.getSelectedIndex() + 1;
            ProblemModelingForm.numOfMaxAppearancesPerItem = this.cb_maxAppearancesPerMovie.getSelectedIndex() - 1; //it starts from -1
            ProblemModelingForm.categoryPopularity_mode = this.cb_categoryPopularityMode.getSelectedIndex();
            ProblemModelingForm.categoryPopularity_mode_str = (String) this.cb_categoryPopularityMode.getSelectedItem();
            ProblemModelingForm.packageSize = this.cb_packageSize.getSelectedIndex();
            if (numOfItemsPerCategory == 0) {
                if (packageSize > formsAndFunctionality.ItemsAllocationToCategoriesForm.numOfItemsPerPackage) {
                    packageSize = 0;
                }
            } else if (packageSize > numOfItemsPerCategory * numOfTopCategories) {
                packageSize = 0;
            }

            this.createGraph();
            this.printItemNodes(vertexItem_list);
            this.printCategoryNodes(vertexCategory_list);
            this.printSourceNode();
            this.printSinkNode();
        } catch (Exception e) {
            e.printStackTrace();
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: loadGraph() " + e, "Message", JOptionPane.WARNING_MESSAGE);
        }
    }

    public void loadGraphOfTopCategories() {
        try {
            loadGraph();
            this.loadTopCategories(ProblemModelingForm.numOfTopCategories);
            this.loadItemsOfTopCategories();
            this.loadSourceSinkNodesOfTopCategories();
            this.cb_numOfCategories.setSelectedIndex((ProblemModelingForm.numOfTopCategories - 1));
            if (numOfItemsPerCategory > 0) { //load the num of items per category to itemsAllocationToCategories[]
                Integer[] itemsAllocation = new Integer[numOfTopCategories];
                for (int i = 0; i < numOfTopCategories; i++) {
                    itemsAllocation[i] = numOfItemsPerCategory;
                }
                itemsAllocationToCategories = itemsAllocation;
            } else //
            {
                if (itemsAllocationToCategories == null) {
                    ProblemModelingForm.numOfItemsPerCategory = 1;
                    this.cb_numOfItemsPerCategory.setSelectedIndex(1);
                    Integer[] itemsAllocation = new Integer[numOfTopCategories];
                    for (int i = 0; i < numOfTopCategories; i++) {
                        itemsAllocation[i] = numOfItemsPerCategory;
                    }
                    itemsAllocationToCategories = itemsAllocation;
                }
            }
            this.printItemNodes(vertexItemOfTopCategories_list);
            this.printCategoryNodes(vertexTopCategory_list);
            this.printSourceNode();
            this.printSinkNode();
        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: loadGraphOfTopCategories() " + e, "Message", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
            return;
        }
    }

    //it loads to the vertexTopCategory_list that the Category nodes have the most films.
    //it loads the (numOfCategories) most popular categories.
    //categoryPopularity_mode = 0 --> according to the number of viewed movies per category, 
    //categoryPopularity_mode = 1 --> according to the overall ratings, 
    //categoryPopularity_mode = 2 --> according to the the number of predicted movies per category. 
    public void loadTopCategories(int numOfCategories) {
        try {
            vertexTopCategory_list.clear();
            categoriesPopularity_list.clear();
            if (categoryPopularity_mode == 2) {
                int count = 0;
                Iterator<VertexCategory> itr = vertexCategory_list.iterator();
                while (itr.hasNext()) {
                    VertexCategory vertexCategory_temp = new VertexCategory();
                    vertexCategory_temp = itr.next();
                    if (count < numOfCategories) {
                        count++;
                        ProblemModelingForm.vertexTopCategory_list.add(vertexCategory_temp);
                        CategoryPopularityOverallRating temp = new CategoryPopularityOverallRating(vertexCategory_temp.getCategoryID(), vertexCategory_temp.getMoveisPerCategory(), 0.0);
                        categoriesPopularity_list.add(temp);
                    } else {
                        break;
                    }
                }
                ProblemModelingForm.numOfTopCategories = count;
            } else {
                HashMap<String, CategoryPopularityOverallRating> popularityOfCategories_hashMap = new HashMap<>();
                List<ItemRating> movieRatingsList = ReadFiles.ratingsPerUser_hashTable.get(StartForm.selectedUserID).getItemRatingList();
                // int movieIndex = 0;
                Iterator<ItemRating> itr = movieRatingsList.iterator();
                while (itr.hasNext()) {
                    ItemRating movieRating_temp = itr.next();
                    int movieID = movieRating_temp.getItemID();
                    double rating = movieRating_temp.getRating();
                    Item movie = ReadFiles.movies_hashTable.get(movieID);
                    String[] genres = movie.getCategories();
                    //creating the category nodes
                    for (String category : genres) {
                        CategoryPopularityOverallRating categoryPopularity = popularityOfCategories_hashMap.get(category);
                        if (categoryPopularity == null) {
                            CategoryPopularityOverallRating temp = new CategoryPopularityOverallRating(category, 1, rating);
                            popularityOfCategories_hashMap.put(category, temp);
                        } else {
                            int newPopulation = categoryPopularity.getPopularity() + 1;
                            double newOverallRating = categoryPopularity.getOverallRating() + rating;
                            CategoryPopularityOverallRating temp = new CategoryPopularityOverallRating(category, newPopulation, newOverallRating);
                            popularityOfCategories_hashMap.put(category, temp);
                        }
                    }
                }

                Iterator<String> keySetIterator = popularityOfCategories_hashMap.keySet().iterator();
                //Enumeration<String> keys = popularityOfCategories_hashtable.keys();
                // while (keys.hasMoreElements()) {
                while (keySetIterator.hasNext()) {
                    String category = keySetIterator.next();
                    CategoryPopularityOverallRating temp = popularityOfCategories_hashMap.get(category);
                    categoriesPopularity_list.add(temp);
                }

                if (categoryPopularity_mode == 0) {
                    //sorting descending based on the number of items per category
                    Collections.sort(categoriesPopularity_list, new Comparator<CategoryPopularityOverallRating>() {
                        public int compare(CategoryPopularityOverallRating o1, CategoryPopularityOverallRating o2) {
                            return o2.getPopularity() - o1.getPopularity();
                        }
                    });
                } else if (categoryPopularity_mode == 1) {
                    //sorting descending based on the overall rating
                    Collections.sort(categoriesPopularity_list, new Comparator<CategoryPopularityOverallRating>() {
                        public int compare(CategoryPopularityOverallRating o1, CategoryPopularityOverallRating o2) {
                            return (int) ((o2.getOverallRating() - o1.getOverallRating()) * 1000.0);
                        }
                    });
                }
                /////////////////
                // for (int i = 0; i < categoriesPopularity_list.size(); i++) {
                //      System.out.println("category = " + categoriesPopularity_list.get(i).getCategory()
                //              + " Population = " + categoriesPopularity_list.get(i).getPopularity()
                //              + " Population = " + categoriesPopularity_list.get(i).getOverallRating());
                //  }
                //////////////////
                int count = 0;
                Iterator<CategoryPopularityOverallRating> itr_cpl = categoriesPopularity_list.iterator();
                while (itr_cpl.hasNext()) {
                    String category = itr_cpl.next().getCategory();
                    Iterator<VertexCategory> itr_vcl = vertexCategory_list.iterator();
                    while (itr_vcl.hasNext()) {
                        VertexCategory vertexCategory_temp = itr_vcl.next();
                        if (category.equals(vertexCategory_temp.getCategoryID())) {
                            ProblemModelingForm.vertexTopCategory_list.add(vertexCategory_temp);
                            count++;
                            break;
                        }
                    }
                    if (count == numOfCategories) {
                        break;
                    }
                }
                ProblemModelingForm.numOfTopCategories = count;
                ///////////////////////////
                //System.out.println(this.numOfTopCategories);
                //////////////////////
            }
        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: loadTopCategories() " + e, "Message", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
            return;
        }
    }

    //it returns 1 if category of movie exists in vertexTopCategory_list else it returns 0
    public int existenceOfCategory(VertexItem vertexItem) {
        List<EdgeItemCategory> eMC_list = new ArrayList<>();
        eMC_list = vertexItem.getEdgeItemCategory_list();
        int sizeOf_eMC = eMC_list.size();
        int sizeOf_vertexTopCategoryList = vertexTopCategory_list.size();
        for (int i = 0; i < sizeOf_eMC; i++) { //searh for the existence of this genre in the list
            for (int j = 0; j < sizeOf_vertexTopCategoryList; j++) {
                if ((vertexTopCategory_list.get(j).getCategoryID()).equals(eMC_list.get(i).getCategoryID())) { //this genre exists in the list
                    return 1;
                }
            }
        }
        return 0;
    }

    //it loads to the vertexMoviesOfTopCategoris_list that the movie nodes have categories of the vertexTocCategory_list.   
    public void loadItemsOfTopCategories() {
        //remove list
        Iterator<VertexItem> itr1 = vertexItemOfTopCategories_list.iterator();
        while (itr1.hasNext()) { //remove all contents of list
            this.vertexItemOfTopCategories_list.remove(0);
        }
        //add nodes to vertexMovieOfTopCategories_list
        int sizeOf_vertexMovieList = vertexItem_list.size();
        for (int i = 0; i < sizeOf_vertexMovieList; i++) {
            VertexItem vertexMovie = new VertexItem();
            vertexMovie = vertexItem_list.get(i);
            if (existenceOfCategory(vertexMovie) == 1) {
                vertexItemOfTopCategories_list.add(vertexMovie);
            }
        }
        //set movieIndex
        int size = vertexItemOfTopCategories_list.size();
        //   for (int i = 0; i < size; i++) {
        //      vertexMovieOfTopCategories_list.get(i).setMovieIndex(i + 1);
        //  }
    }

    public void loadSourceSinkNodesOfTopCategories() {
        //creating the Sink Node
        List<EdgeCategorySink> edgeCategorySink_list = new ArrayList<EdgeCategorySink>();
        Iterator<VertexCategory> itrC = vertexTopCategory_list.iterator();
        int sinkSourceMaxFlow = 0;
        while (itrC.hasNext()) {
            VertexCategory vertexCategory_temp = new VertexCategory();
            vertexCategory_temp = itrC.next();
            String categoryID = vertexCategory_temp.getCategoryID();
            EdgeCategorySink edgeCategorySink = new EdgeCategorySink();
            edgeCategorySink = vertexCategory_temp.getEdgeCategorySink();
            edgeCategorySink_list.add(edgeCategorySink);
            sinkSourceMaxFlow += edgeCategorySink.getMaxFlow();
        }
        EdgeSinkSource edgeSinkSource_sink = new EdgeSinkSource(0.0, sinkSourceMaxFlow, 0);
        this.vertexSink = new VertexSink(edgeSinkSource_sink, edgeCategorySink_list);
        //creating the Source Node
        List<EdgeItemSource> edgeMovieSource_list = new ArrayList<EdgeItemSource>();
        Iterator<VertexItem> itrM = vertexItemOfTopCategories_list.iterator();
        while (itrM.hasNext()) {
            VertexItem vertexMovie_temp = new VertexItem();
            vertexMovie_temp = itrM.next();
            //int movieID = vertexMovie_temp.getMovieID();
            EdgeItemSource edgeMovieSource = new EdgeItemSource();
            edgeMovieSource = vertexMovie_temp.getEdgeMoveSource();
            edgeMovieSource_list.add(edgeMovieSource);
        }
        EdgeSinkSource edgeSinkSource_source = new EdgeSinkSource();
        edgeSinkSource_source = edgeSinkSource_sink;
        this.vertexSource = new VertexSource(edgeSinkSource_source, edgeMovieSource_list);
    }

    public void createGraph() {
        try {
            vertexItem_list.clear(); //clear vertexMovie_list
            vertexCategory_list.clear(); //clear vertexCategory_list

            //creating movie nodes
            int userID = formsAndFunctionality.StartForm.selectedUserID;
            //int numOfRatings = fileManagerClasses.ReadFiles.ratingsPerUser_hashTable.get(userID).getNumOfRatings();
            List<ItemRating> movieRatingsList = new ArrayList<>();
            //movieRatingsList = fileManagerClasses.ReadFiles.ratingsPerUser_hashTable.get(userID).getMovieRatingList();
            movieRatingsList = RunningModeForm.predictedItemRatingsWithPopularity_list;
            // int movieIndex = 0;
            Iterator<ItemRating> itr = movieRatingsList.iterator();
            while (itr.hasNext()) {
                // MovieRating movieRating_temp = new MovieRating();
                ItemRating movieRating_temp = itr.next();
                int movieID = movieRating_temp.getItemID();
                double rating = movieRating_temp.getRating();
                double cost = 1.0 / ((double) rating);
                int maxFlow = 1;
                int minFlow = 0;
                //Movie movie = new Movie();
                Item movie = ReadFiles.movies_hashTable.get(movieID);
                String[] genres = movie.getCategories();
                int numOfMaxAppearances = movie.getNumOfMaxAppearances();

                //creating the Movie Nodes
                //creating the edgeMovieCategory_list
                List<EdgeItemCategory> edgeMovieCategory_list = new ArrayList<>();
                //String[] categories = new String[15]; //all gentres are less than 15
                for (String category : genres) {
                    EdgeItemCategory edgeMovieCategory_temp = new EdgeItemCategory(movieID, category, rating, cost, maxFlow, minFlow);
                    edgeMovieCategory_list.add(edgeMovieCategory_temp);
                }
                //creating the edge movie-source
                EdgeItemSource edgeMovieSource = new EdgeItemSource(movieID, 0, 1, 0);

                //movieIndex++; //the position of movie in the list, movieIndex = {1, 2, 3,...}
                //creating the vertex of this film
                VertexItem vertexMovie = new VertexItem(movieID, numOfMaxAppearances, edgeMovieCategory_list, edgeMovieSource);
                //Add the vertex of movie to the vertexMovie_list
                ProblemModelingForm.vertexItem_list.add(vertexMovie);

                //creating the category nodes
                for (String category : genres) {
                    int size = vertexCategory_list.size();
                    //System.out.println(size);
                    if (size == 0) { //The vertexCategory is null
                        List<EdgeItemCategory> edgeMovieCategory_list_temp = new ArrayList<>();
                        //VertexCategory vertexCategory = new VertexCategory();
                        //edgeMovieCategory_list_temp = vertexCategory.getEdgeMovieCategory_list();
                        EdgeItemCategory edgeMovieCategory_2 = new EdgeItemCategory(movieID, category, rating, cost, maxFlow, minFlow);
                        edgeMovieCategory_list_temp.add(edgeMovieCategory_2);
                        EdgeCategorySink edgeCategorySink = new EdgeCategorySink(category, 0, ProblemModelingForm.numOfItemsPerCategory, ProblemModelingForm.numOfItemsPerCategory);///////////
                        VertexCategory vc = new VertexCategory(category, edgeMovieCategory_list_temp, edgeCategorySink);
                        vertexCategory_list.add(vc);
                    } else {
                        int flag = 1;
                        for (int i = 0; i < size; i++) { //searh for the existence of this genre in the list
                            if ((vertexCategory_list.get(i).getCategoryID()).equals(category)) { //this genre exists in the list
                                //List<EdgeMovieCategory> edgeMovieCategory_list_temp = new ArrayList<>();
                                //VertexCategory vertexCategory = new VertexCategory();
                                VertexCategory vertexCategory = vertexCategory_list.get(i);
                                List<EdgeItemCategory> edgeMovieCategory_list_temp = vertexCategory.getEdgeMovieCategory_list();
                                EdgeItemCategory edgeMovieCategory_2 = new EdgeItemCategory(movieID, category, rating, cost, maxFlow, minFlow);
                                edgeMovieCategory_list_temp.add(edgeMovieCategory_2);
                                VertexCategory vc = new VertexCategory(category, edgeMovieCategory_list_temp, vertexCategory.getEdgeCategorySink());
                                vertexCategory_list.remove(i);
                                vertexCategory_list.add(vc);
                                i = size + 1;
                                flag = 0;
                            }
                        }
                        if (flag == 1) { //this genre does not exists in the list 
                            List<EdgeItemCategory> edgeMovieCategory_list_temp = new ArrayList<>();
                            //VertexCategory vertexCategory = new VertexCategory();
                            //edgeMovieCategory_list_temp = vertexCategory.getEdgeMovieCategory_list();
                            EdgeItemCategory edgeMovieCategory_2 = new EdgeItemCategory(movieID, category, rating, cost, maxFlow, minFlow);
                            edgeMovieCategory_list_temp.add(edgeMovieCategory_2);
                            EdgeCategorySink edgeCategorySink = new EdgeCategorySink(category, 0, ProblemModelingForm.numOfItemsPerCategory, ProblemModelingForm.numOfItemsPerCategory);////////////
                            VertexCategory vc = new VertexCategory(category, edgeMovieCategory_list_temp, edgeCategorySink);
                            vertexCategory_list.add(vc);
                        }
                    }
                }
                // }
            }

            //creating the Sink Node
            List<EdgeCategorySink> edgeCategorySink_list = new ArrayList<>();
            Iterator<VertexCategory> itrC = vertexCategory_list.iterator();
            int sinkSourceMaxFlow = 0;
            while (itrC.hasNext()) {
                //VertexCategory vertexCategory_temp = new VertexCategory();
                VertexCategory vertexCategory_temp = itrC.next();
                String categoryID = vertexCategory_temp.getCategoryID();

                //EdgeCategorySink edgeCategorySink = new EdgeCategorySink();
                EdgeCategorySink edgeCategorySink = vertexCategory_temp.getEdgeCategorySink();

                edgeCategorySink_list.add(edgeCategorySink);
                sinkSourceMaxFlow += edgeCategorySink.getMaxFlow();
            }
            EdgeSinkSource edgeSinkSource_sink = new EdgeSinkSource(0.0, sinkSourceMaxFlow, sinkSourceMaxFlow);/////////////
            ProblemModelingForm.vertexSink = new VertexSink(edgeSinkSource_sink, edgeCategorySink_list);

            //creating the Source Node
            List<EdgeItemSource> edgeMovieSource_list = new ArrayList<>();
            Iterator<VertexItem> itrM = vertexItem_list.iterator();
            while (itrM.hasNext()) {
                // VertexMovie vertexMovie_temp = new VertexMovie();
                VertexItem vertexMovie_temp = itrM.next();
                //int movieID = vertexMovie_temp.getMovieID();

                //EdgeMovieSource edgeMovieSource = new EdgeMovieSource();
                EdgeItemSource edgeMovieSource = vertexMovie_temp.getEdgeMoveSource();
                edgeMovieSource_list.add(edgeMovieSource);
            }
            //EdgeSinkSource edgeSinkSource_source = new EdgeSinkSource();
            EdgeSinkSource edgeSinkSource_source = edgeSinkSource_sink;
            ProblemModelingForm.vertexSource = new VertexSource(edgeSinkSource_source, edgeMovieSource_list);

            //sorting based on number of movies per category
            Collections.sort(vertexCategory_list, new Comparator<VertexCategory>() {
                public int compare(VertexCategory vc1, VertexCategory vc2) {
                    return vc2.getMoveisPerCategory() - vc1.getMoveisPerCategory();
                }
            });

        } catch (Exception e) {
            Component frame = null;
            JOptionPane.showMessageDialog(frame, "Error: createGraph() " + e, "Message", JOptionPane.WARNING_MESSAGE);
            e.printStackTrace();
            return;
        }
    }

    public void printItemNodes(List<VertexItem> vertexItem_list) {
        Integer b = tb_movieNodes.getRowCount();
        for (int i = 0; i < b; i++) {
            ((DefaultTableModel) tb_movieNodes.getModel()).removeRow(0);
        }
        int numOfMovieNodes = 0;
        Iterator<VertexItem> itr = vertexItem_list.iterator();
        while (itr.hasNext()) {
            //VertexItem vertexMovie_temp = new VertexItem();
            VertexItem vertexMovie_temp = itr.next();
            int movieID = vertexMovie_temp.getItemID();
            // int movieIndex = vertexMovie_temp.getMovieIndex();

            //EdgeItemSource edgeMovieSource = new EdgeItemSource();
            EdgeItemSource edgeMovieSource = vertexMovie_temp.getEdgeMoveSource();

            List<EdgeItemCategory> edgeMovieCategory_list = new ArrayList<>();
            edgeMovieCategory_list = vertexMovie_temp.getEdgeItemCategory_list();
            /*
             ///////////////
             System.out.print(movieID + " [ " + edgeMovieSource.getMovieID() + 
             ", " + edgeMovieSource.getCost() +  ", " 
             + edgeMovieSource.getMaxFlow() +  
             ", " + edgeMovieSource.getMinFlow() + " ], ");
             */
            String sourceMovieEdge_text = " [ " + edgeMovieSource.getCost()
                    + ", " + edgeMovieSource.getMaxFlow() + ", "
                    + edgeMovieSource.getMinFlow() + " ] ";
            String movieGenreEdge_text = "";

            Iterator<EdgeItemCategory> iter = edgeMovieCategory_list.iterator();
            while (iter.hasNext()) {
                EdgeItemCategory edgeMovieCagegory_temp = new EdgeItemCategory();
                edgeMovieCagegory_temp = iter.next();
                String category = edgeMovieCagegory_temp.getCategoryID();
                //int movieID_ = edgeMovieCagegory_temp.getMovieID();
                double rating = edgeMovieCagegory_temp.getRating();
                double cost = edgeMovieCagegory_temp.getCost();
                int maxFlow = edgeMovieCagegory_temp.getMaxFlow();
                int minFlow = edgeMovieCagegory_temp.getMinFlow();
                /*
                 //////////
                 System.out.print(" [ " + movieID_ + ", " + category + 
                 ", " + rating +  ", " 
                 + cost +  
                 ", " + maxFlow + 
                 ",  " + minFlow + "], ");
                 */
                movieGenreEdge_text += " [ " + category
                        + ", " + round(rating, 1) + ", "
                        + round(cost, 2)
                        + ", " + maxFlow
                        + ",  " + minFlow + "] ";
            }
            numOfMovieNodes++;
            ((DefaultTableModel) tb_movieNodes.getModel()).addRow(new Object[]{numOfMovieNodes, movieID, sourceMovieEdge_text, movieGenreEdge_text});
            // System.out.println(" ");
        }
    }

    public void printCategoryNodes(List<VertexCategory> vertexCategory_list) {
        Integer b = tb_categoryNodes.getRowCount();
        for (int i = 0; i < b; i++) {
            ((DefaultTableModel) tb_categoryNodes.getModel()).removeRow(0);
        }

        Iterator<VertexCategory> itr = vertexCategory_list.iterator();
        int numOfCategoryNodes = 0;
        while (itr.hasNext()) {
            VertexCategory vertexCategory_temp = new VertexCategory();
            vertexCategory_temp = itr.next();
            // int categoryIndex = vertexCategory_temp.getCategoryIndex();
            String categoryID = vertexCategory_temp.getCategoryID();
            int moviesPerCategory = vertexCategory_temp.getMoveisPerCategory();

            EdgeCategorySink edgeCategorySink = new EdgeCategorySink();
            edgeCategorySink = vertexCategory_temp.getEdgeCategorySink();

            List<EdgeItemCategory> edgeMovieCategory_list = new ArrayList<EdgeItemCategory>();
            edgeMovieCategory_list = vertexCategory_temp.getEdgeMovieCategory_list();
            /*
             ///////////////
             System.out.print(movieID + " [ " + edgeMovieSource.getMovieID() + 
             ", " + edgeMovieSource.getCost() +  ", " 
             + edgeMovieSource.getMaxFlow() +  
             ", " + edgeMovieSource.getMinFlow() + " ], ");
             */
            String categorySinkEdge_text = " [ " + edgeCategorySink.getCost()
                    + ", " + edgeCategorySink.getMaxFlow() + ", "
                    + edgeCategorySink.getMinFlow() + " ] ";
            String movieCategoryEdge_text = "";

            Iterator<EdgeItemCategory> iter = edgeMovieCategory_list.iterator();
            while (iter.hasNext()) {
                EdgeItemCategory edgeMovieCagegory_temp = new EdgeItemCategory();
                edgeMovieCagegory_temp = iter.next();
                String category = edgeMovieCagegory_temp.getCategoryID();
                int movieID_ = edgeMovieCagegory_temp.getItemID();
                double rating = edgeMovieCagegory_temp.getRating();
                double cost = edgeMovieCagegory_temp.getCost();
                int maxFlow = edgeMovieCagegory_temp.getMaxFlow();
                int minFlow = edgeMovieCagegory_temp.getMinFlow();
                /*
                 //////////
                 System.out.print(" [ " + movieID_ + ", " + category + 
                 ", " + rating +  ", " 
                 + cost +  
                 ", " + maxFlow + 
                 ",  " + minFlow + "], ");
                 */

                movieCategoryEdge_text += " [ " + movieID_
                        + ", " + round(rating, 1) + ", "
                        + round(cost, 2)
                        + ", " + maxFlow
                        + ",  " + minFlow + "] ";

            }
            numOfCategoryNodes++;
            ((DefaultTableModel) tb_categoryNodes.getModel()).addRow(new Object[]{numOfCategoryNodes, categoryID, moviesPerCategory, categorySinkEdge_text, movieCategoryEdge_text});
            //System.out.println(" ");
        }
    }

    public void printSourceNode() {

        Integer b = tb_sourceNode.getRowCount();
        for (int i = 0; i < b; i++) {
            ((DefaultTableModel) tb_sourceNode.getModel()).removeRow(0);
        }

        String sourceSinkEdge_text = " [ " + this.vertexSource.getEdgeSinkSource().getCost()
                + ", " + this.vertexSource.getEdgeSinkSource().getMaxFlow() + ", "
                + this.vertexSource.getEdgeSinkSource().getMinFlow() + " ] ";
        String movieSourceEdge_text = "";

        List<EdgeItemSource> edgeMovieSource_list = new ArrayList<EdgeItemSource>();
        edgeMovieSource_list = this.vertexSource.getEdgeMovieSource_list();

        Iterator<EdgeItemSource> iter = edgeMovieSource_list.iterator();
        while (iter.hasNext()) {
            EdgeItemSource edgeMovieSource_temp = new EdgeItemSource();
            edgeMovieSource_temp = iter.next();
            int movieID = edgeMovieSource_temp.getItemID();
            double cost = edgeMovieSource_temp.getCost();
            int maxFlow = edgeMovieSource_temp.getMaxFlow();
            int minFlow = edgeMovieSource_temp.getMinFlow();
            movieSourceEdge_text += " [ " + movieID
                    + ", " + round(cost, 2)
                    + ", " + maxFlow
                    + ",  " + minFlow + "] ";
        }
        ((DefaultTableModel) tb_sourceNode.getModel()).addRow(new Object[]{sourceSinkEdge_text, movieSourceEdge_text});
    }

    public void printSinkNode() {
        Integer b = tb_sinkNode.getRowCount();
        for (int i = 0; i < b; i++) {
            ((DefaultTableModel) tb_sinkNode.getModel()).removeRow(0);
        }

        String sourceSinkEdge_text = " [ " + this.vertexSink.getEdgeSinkSource().getCost()
                + ", " + this.vertexSink.getEdgeSinkSource().getMaxFlow() + ", "
                + this.vertexSink.getEdgeSinkSource().getMinFlow() + " ] ";
        String categorySinkEdge_text = "";

        List<EdgeCategorySink> edgeCategorySink_list = new ArrayList<EdgeCategorySink>();
        edgeCategorySink_list = this.vertexSink.getEdgeCategorySink_list();

        Iterator<EdgeCategorySink> iter = edgeCategorySink_list.iterator();
        while (iter.hasNext()) {
            EdgeCategorySink edgeCategorySink_temp = new EdgeCategorySink();
            edgeCategorySink_temp = iter.next();
            String categoryID = edgeCategorySink_temp.getCategoryID();
            double cost = edgeCategorySink_temp.getCost();
            int maxFlow = edgeCategorySink_temp.getMaxFlow();
            int minFlow = edgeCategorySink_temp.getMinFlow();
            categorySinkEdge_text += " [ " + categoryID
                    + ", " + round(cost, 2)
                    + ", " + maxFlow
                    + ",  " + minFlow + "] ";
        }
        ((DefaultTableModel) tb_sinkNode.getModel()).addRow(new Object[]{sourceSinkEdge_text, categorySinkEdge_text});
    }

    //it rounds the double number in specific number of decimals
    public double round(double number, int decimals) {
        if (decimals < 0) {
            return number; //no change in number
        }
        long factor = (long) Math.pow(10, decimals);
        number = number * factor;
        long tmp = Math.round(number);
        return (double) tmp / factor;
    }

    /*
    
      
    //it loads to the vertexTopCategory_list that the Category nodes have the most films.
    //it loads the (numOfCategories) most popular categories
    public void loadTopCategories_old(int numOfCategories) {
        //remove list
        Iterator<VertexCategory> itr1 = vertexTopCategory_list.iterator();
        while (itr1.hasNext()) { //remove all contents of list
            ProblemModelingForm.vertexTopCategory_list.remove(0);
        }
        int count = 0;
        Iterator<VertexCategory> itr = vertexCategory_list.iterator();
        while (itr.hasNext()) {
            VertexCategory vertexCategory_temp = new VertexCategory();
            vertexCategory_temp = itr.next();
            if (count < numOfCategories) {
                count++;
                ProblemModelingForm.vertexTopCategory_list.add(vertexCategory_temp);
            } else {
                break;
            }
        }
        ProblemModelingForm.numOfTopCategories = count;
       //adding the categroyIndex number for each member of vertexTopCategory_list
       // int categoryIndex = 0;
       //int sizeOfList = this.vertexTopCategory_list.size();
       // for (int i = 0; i < sizeOfList; i++) {
      //      categoryIndex++;
      //      vertexTopCategory_list.get(i).setCategoryIndex(categoryIndex);
      //  }
        ///////////////////////////
        // System.out.println(this.numOfTopCategories);
    }

    
    
    
    public void createGraph_old() {
        //remove vertexMovie_list
        Iterator<VertexMovie> itr11 = vertexMovie_list.iterator();
        while (itr11.hasNext()) { //remove all contents of list
            this.vertexMovie_list.remove(0);
        }
        //remove vertexCategory_list
        Iterator<VertexCategory> itr12 = vertexCategory_list.iterator();
        while (itr12.hasNext()) { //remove all contents of list
            this.vertexCategory_list.remove(0);
        }

        //creating movie nodes
        int userID = forms.StartForm.selectedUserID;
        int numOfRatings = fileManagerClasses.ReadFiles.ratingsPerUser_hashTable.get(userID).getNumOfRatings();
        List<MovieRating> movieRatingsList = new ArrayList<MovieRating>();
        movieRatingsList = fileManagerClasses.ReadFiles.ratingsPerUser_hashTable.get(userID).getMovieRatingList();
        
       // int movieIndex = 0;
        Iterator<MovieRating> itr = movieRatingsList.iterator();
        while (itr.hasNext()) {
            MovieRating movieRating_temp = new MovieRating();
            movieRating_temp = itr.next();
            int movieID = movieRating_temp.getMovieID();
            double rating = movieRating_temp.getRating();
            double cost = 1.0 / rating;
            int maxFlow = 1;
            int minFlow = 0;
            Movie movie = new Movie();
            movie = ReadFiles.movies_hashTable.get(movieID);
            String[] genres = movie.getGenres();
            int numOfMaxAppearances = movie.getNumOfMaxAppearances();

            //creating the Movie Nodes
            //creating the edgeMovieCategory_list
            List<EdgeMovieCategory> edgeMovieCategory_list = new ArrayList<>();
            //String[] categories = new String[15]; //all gentres are less than 15
            for (String category : genres) {
                EdgeMovieCategory edgeMovieCategory_temp = new EdgeMovieCategory(movieID, category, rating, cost, maxFlow, minFlow);
                edgeMovieCategory_list.add(edgeMovieCategory_temp);
            }
            //creating the edge movie-source
            EdgeMovieSource edgeMovieSource = new EdgeMovieSource(movieID, 0, 1, 0);

            //movieIndex++; //the position of movie in the list, movieIndex = {1, 2, 3,...}
            //creating the vertex of this film
            VertexMovie vertexMovie = new VertexMovie( movieID, numOfMaxAppearances, edgeMovieCategory_list, edgeMovieSource);
            //Add the vertex of movie to the vertexMovie_list
            this.vertexMovie_list.add(vertexMovie);

            //creating the category nodes
            for (String category : genres) {
                int size = vertexCategory_list.size();
                //System.out.println(size);
                if (size == 0) { //The vertexCategory is null
                    List<EdgeMovieCategory> edgeMovieCategory_list_temp = new ArrayList<>();
                    VertexCategory vertexCategory = new VertexCategory();
                    //edgeMovieCategory_list_temp = vertexCategory.getEdgeMovieCategory_list();
                    EdgeMovieCategory edgeMovieCategory_2 = new EdgeMovieCategory(movieID, category, rating, cost, maxFlow, minFlow);
                    edgeMovieCategory_list_temp.add(edgeMovieCategory_2);
                    EdgeCategorySink edgeCategorySink = new EdgeCategorySink(category, 0, this.numOfItemsPerCategory, this.numOfItemsPerCategory);///////////
                    VertexCategory vc = new VertexCategory(category, edgeMovieCategory_list_temp, edgeCategorySink);
                    vertexCategory_list.add(vc);
                } else {
                    int flag = 1;
                    for (int i = 0; i < size; i++) { //searh for the existence of this genre in the list
                        if ((vertexCategory_list.get(i).getCategoryID()).equals(category)) { //this genre exists in the list
                            List<EdgeMovieCategory> edgeMovieCategory_list_temp = new ArrayList<>();
                            VertexCategory vertexCategory = new VertexCategory();
                            vertexCategory = vertexCategory_list.get(i);
                            edgeMovieCategory_list_temp = vertexCategory.getEdgeMovieCategory_list();
                            EdgeMovieCategory edgeMovieCategory_2 = new EdgeMovieCategory(movieID, category, rating, cost, maxFlow, minFlow);
                            edgeMovieCategory_list_temp.add(edgeMovieCategory_2);
                            VertexCategory vc = new VertexCategory(category, edgeMovieCategory_list_temp, vertexCategory.getEdgeCategorySink());
                            vertexCategory_list.remove(i);
                            vertexCategory_list.add(vc);
                            i = size + 1;
                            flag = 0;
                        }
                    }
                    if (flag == 1) { //this genre does not exists in the list 
                        List<EdgeMovieCategory> edgeMovieCategory_list_temp = new ArrayList<>();
                        VertexCategory vertexCategory = new VertexCategory();
                        //edgeMovieCategory_list_temp = vertexCategory.getEdgeMovieCategory_list();
                        EdgeMovieCategory edgeMovieCategory_2 = new EdgeMovieCategory(movieID, category, rating, cost, maxFlow, minFlow);
                        edgeMovieCategory_list_temp.add(edgeMovieCategory_2);
                        EdgeCategorySink edgeCategorySink = new EdgeCategorySink(category, 0, this.numOfItemsPerCategory, this.numOfItemsPerCategory);////////////
                        VertexCategory vc = new VertexCategory(category, edgeMovieCategory_list_temp, edgeCategorySink);
                        vertexCategory_list.add(vc);
                    }
                }
            }
        }

        //creating the Sink Node
        List<EdgeCategorySink> edgeCategorySink_list = new ArrayList<EdgeCategorySink>();
        Iterator<VertexCategory> itrC = vertexCategory_list.iterator();
        int sinkSourceMaxFlow = 0;
        while (itrC.hasNext()) {
            VertexCategory vertexCategory_temp = new VertexCategory();
            vertexCategory_temp = itrC.next();
            String categoryID = vertexCategory_temp.getCategoryID();

            EdgeCategorySink edgeCategorySink = new EdgeCategorySink();
            edgeCategorySink = vertexCategory_temp.getEdgeCategorySink();

            edgeCategorySink_list.add(edgeCategorySink);
            sinkSourceMaxFlow += edgeCategorySink.getMaxFlow();
        }
        EdgeSinkSource edgeSinkSource_sink = new EdgeSinkSource(0.0, sinkSourceMaxFlow, sinkSourceMaxFlow);/////////////
        this.vertexSink = new VertexSink(edgeSinkSource_sink, edgeCategorySink_list);

        //creating the Source Node
        List<EdgeMovieSource> edgeMovieSource_list = new ArrayList<EdgeMovieSource>();
        Iterator<VertexMovie> itrM = vertexMovie_list.iterator();
        while (itrM.hasNext()) {
            VertexMovie vertexMovie_temp = new VertexMovie();
            vertexMovie_temp = itrM.next();
            //int movieID = vertexMovie_temp.getMovieID();

            EdgeMovieSource edgeMovieSource = new EdgeMovieSource();
            edgeMovieSource = vertexMovie_temp.getEdgeMoveSource();
            edgeMovieSource_list.add(edgeMovieSource);
        }
        EdgeSinkSource edgeSinkSource_source = new EdgeSinkSource();
        edgeSinkSource_source = edgeSinkSource_sink;
        this.vertexSource = new VertexSource(edgeSinkSource_source, edgeMovieSource_list);

        //sorting based on number of movies per category
        Collections.sort(vertexCategory_list, new Comparator<VertexCategory>() {
            public int compare(VertexCategory vc1, VertexCategory vc2) {
                return vc2.getMoveisPerCategory() - vc1.getMoveisPerCategory();
            }
        });

        //adding the categroyIndex number for each member of vertexCategory_list
        int categoryIndex = 0;
        int sizeOfList = this.vertexCategory_list.size();
      //  for (int i = 0; i < sizeOfList; i++) {
      //      categoryIndex++;
        //    vertexCategory_list.get(i).setCategoryIndex(categoryIndex);
       // }
    }

     */
 /*  
    public void createGraph_old() {
        //remove vertexMovie_list
        Iterator<VertexMovie> itr11 = vertexMovie_list.iterator();
        while (itr11.hasNext()) { //remove all contents of list
                this.vertexMovie_list.remove(0);
        }
        //remove vertexCategory_list
        Iterator<VertexCategory> itr12 = vertexCategory_list.iterator();
        while (itr12.hasNext()) { //remove all contents of list
                this.vertexCategory_list.remove(0);
        }
        
        //creating movie nodes
        int userID = forms.StartForm.selectedUserID;
        int numOfRatings = fileManagerClasses.ReadFiles.ratingsPerUser_hashTable.get(userID).getNumOfRatings();
        List<MovieRating> movieRatingsList = new ArrayList<MovieRating>();
        movieRatingsList = fileManagerClasses.ReadFiles.ratingsPerUser_hashTable.get(userID).getMovieRatingList();
        int movieIndex = 0;
        Iterator<MovieRating> itr = movieRatingsList.iterator();
        while (itr.hasNext()) {
            MovieRating movieRating_temp = new MovieRating();
            movieRating_temp = itr.next();
            int movieID = movieRating_temp.getMovieID();
            int rating = movieRating_temp.getRating();
            double cost = 1.0 / ((double) rating);
            int maxFlow = 1;
            int minFlow = 0;
            Movie movie = new Movie();
            movie = ReadFiles.movies_hashTable.get(movieID);
            String[] genres = movie.getGenres();

            //creating the Movie Nodes
            //creating the edgeMovieCategory_list
            List<EdgeMovieCategory> edgeMovieCategory_list = new ArrayList<>();
            //String[] categories = new String[15]; //all gentres are less than 15
            for (String category : genres) {
                EdgeMovieCategory edgeMovieCategory_temp = new EdgeMovieCategory(movieID, category, rating, cost, maxFlow, minFlow);
                edgeMovieCategory_list.add(edgeMovieCategory_temp);
            }
            //creating the edge movie-source
            EdgeMovieSource edgeMovieSource = new EdgeMovieSource(movieID, 0, 1, 0);
            
             movieIndex++; //the position of movie in the list, movieIndex = {1, 2, 3,...}
            //creating the vertex of this film
            VertexMovie vertexMovie = new VertexMovie(movieIndex, movieID, edgeMovieCategory_list, edgeMovieSource);
            //Add the vertex of movie to the vertexMovie_list
            this.vertexMovie_list.add(vertexMovie);

            //creating the category nodes
            for (String category : genres) {
                int size = vertexCategory_list.size();
                //System.out.println(size);
                if (size == 0) { //The vertexCategory is null
                    List<EdgeMovieCategory> edgeMovieCategory_list_temp = new ArrayList<>();
                    VertexCategory vertexCategory = new VertexCategory();
                    //edgeMovieCategory_list_temp = vertexCategory.getEdgeMovieCategory_list();
                    EdgeMovieCategory edgeMovieCategory_2 = new EdgeMovieCategory(movieID, category, rating, cost, maxFlow, minFlow);
                    edgeMovieCategory_list_temp.add(edgeMovieCategory_2);
                    EdgeCategorySink edgeCategorySink = new EdgeCategorySink(category, 0, this.numOfPackages, this.numOfPackages);
                    VertexCategory vc = new VertexCategory(0, category, edgeMovieCategory_list_temp, edgeCategorySink);
                    vertexCategory_list.add(vc);
                } else {
                    int flag = 1;
                    for (int i = 0; i < size; i++) { //searh for the existence of this genre in the list
                        if ((vertexCategory_list.get(i).getCategoryID()).equals(category)) { //this genre exists in the list
                            List<EdgeMovieCategory> edgeMovieCategory_list_temp = new ArrayList<>();
                            VertexCategory vertexCategory = new VertexCategory();
                            vertexCategory = vertexCategory_list.get(i);
                            edgeMovieCategory_list_temp = vertexCategory.getEdgeMovieCategory_list();
                            EdgeMovieCategory edgeMovieCategory_2 = new EdgeMovieCategory(movieID, category, rating, cost, maxFlow, minFlow);
                            edgeMovieCategory_list_temp.add(edgeMovieCategory_2);
                            VertexCategory vc = new VertexCategory(0, category, edgeMovieCategory_list_temp, vertexCategory.getEdgeCategorySink());
                            vertexCategory_list.remove(i);
                            vertexCategory_list.add(vc);
                            i = size + 1;
                            flag = 0;
                        }
                    }
                    if (flag == 1) { //this genre does not exists in the list 
                        List<EdgeMovieCategory> edgeMovieCategory_list_temp = new ArrayList<>();
                        VertexCategory vertexCategory = new VertexCategory();
                        //edgeMovieCategory_list_temp = vertexCategory.getEdgeMovieCategory_list();
                        EdgeMovieCategory edgeMovieCategory_2 = new EdgeMovieCategory(movieID, category, rating, cost, maxFlow, minFlow);
                        edgeMovieCategory_list_temp.add(edgeMovieCategory_2);
                        EdgeCategorySink edgeCategorySink = new EdgeCategorySink(category, 0, this.numOfPackages, this.numOfPackages);
                        VertexCategory vc = new VertexCategory(0, category, edgeMovieCategory_list_temp, edgeCategorySink);
                        vertexCategory_list.add(vc);
                    }
                }
            }
        }

        
        //creating the Sink Node
        List<EdgeCategorySink> edgeCategorySink_list = new ArrayList<EdgeCategorySink>();
        Iterator<VertexCategory> itrC = vertexCategory_list.iterator();
        int sinkSourceMaxFlow = 0;
        while (itrC.hasNext()) {
            VertexCategory vertexCategory_temp = new VertexCategory();
            vertexCategory_temp = itrC.next();
            String categoryID = vertexCategory_temp.getCategoryID();

            EdgeCategorySink edgeCategorySink = new EdgeCategorySink();
            edgeCategorySink = vertexCategory_temp.getEdgeCategorySink();

            edgeCategorySink_list.add(edgeCategorySink);
            sinkSourceMaxFlow += edgeCategorySink.getMaxFlow();
        }
        EdgeSinkSource edgeSinkSource_sink = new EdgeSinkSource(0.0, sinkSourceMaxFlow, 0);
        this.vertexSink = new VertexSink(edgeSinkSource_sink, edgeCategorySink_list);

        //creating the Source Node
        List<EdgeMovieSource> edgeMovieSource_list = new ArrayList<EdgeMovieSource>();
        Iterator<VertexMovie> itrM = vertexMovie_list.iterator();
        while (itrM.hasNext()) {
            VertexMovie vertexMovie_temp = new VertexMovie();
            vertexMovie_temp = itrM.next();
            //int movieID = vertexMovie_temp.getMovieID();

            EdgeMovieSource edgeMovieSource = new EdgeMovieSource();
            edgeMovieSource = vertexMovie_temp.getEdgeMoveSource();
            edgeMovieSource_list.add(edgeMovieSource);
        }
        EdgeSinkSource edgeSinkSource_source = new EdgeSinkSource();
        edgeSinkSource_source = edgeSinkSource_sink;
        this.vertexSource = new VertexSource(edgeSinkSource_source, edgeMovieSource_list);
        
       
        //sorting based on number of movies per category
        Collections.sort(vertexCategory_list, new Comparator<VertexCategory>(){
            public int compare(VertexCategory vc1, VertexCategory vc2) {
                 return vc2.getMoveisPerCategory() - vc1.getMoveisPerCategory();
            } 
        });
        
        //adding the categroyIndex number for each member of vertexCategory_list
        int categoryIndex = 0;
        int sizeOfList = this.vertexCategory_list.size();
        for (int i=0; i<sizeOfList; i++){
            categoryIndex++;
            vertexCategory_list.get(i).setCategoryIndex(categoryIndex);
        }  
    }

     */
 /* 
    public void printTopCategoryNodes() {
        Integer b = tb_topCategoryNodes.getRowCount();
        for (int i = 0; i < b; i++) {
            ((DefaultTableModel) tb_topCategoryNodes.getModel()).removeRow(0);
        }

        Iterator<VertexCategory> itr = vertexTopCategory_list.iterator();
        int numOfCategoryNodes = 0;
        while (itr.hasNext()) {
            VertexCategory vertexCategory_temp = new VertexCategory();
            vertexCategory_temp = itr.next();
            String categoryID = vertexCategory_temp.getCategoryID();
            int moviesPerCategory = vertexCategory_temp.getMoveisPerCategory();

            EdgeCategorySink edgeCategorySink = new EdgeCategorySink();
            edgeCategorySink = vertexCategory_temp.getEdgeCategorySink();

            List<EdgeMovieCategory> edgeMovieCategory_list = new ArrayList<EdgeMovieCategory>();
            edgeMovieCategory_list = vertexCategory_temp.getEdgeMovieCategory_list();

            String categorySinkEdge_text = " [ " + edgeCategorySink.getCost()
                    + ", " + edgeCategorySink.getMaxFlow() + ", "
                    + edgeCategorySink.getMinFlow() + " ] ";
            String movieCategoryEdge_text = "";

            Iterator<EdgeMovieCategory> iter = edgeMovieCategory_list.iterator();
            while (iter.hasNext()) {
                EdgeMovieCategory edgeMovieCagegory_temp = new EdgeMovieCategory();
                edgeMovieCagegory_temp = iter.next();
                String category = edgeMovieCagegory_temp.getCategoryID();
                int movieID_ = edgeMovieCagegory_temp.getMovieID();
                int rating = (int) edgeMovieCagegory_temp.getRating();
                double cost = edgeMovieCagegory_temp.getCost();
                int maxFlow = edgeMovieCagegory_temp.getMaxFlow();
                int minFlow = edgeMovieCagegory_temp.getMinFlow();
                movieCategoryEdge_text += " [ " + movieID_
                        + ", " + rating + ", "
                        + round(cost, 2)
                        + ", " + maxFlow
                        + ",  " + minFlow + "] ";
            }
            numOfCategoryNodes++;
            ((DefaultTableModel) tb_topCategoryNodes.getModel()).addRow(new Object[]{numOfCategoryNodes, categoryID, moviesPerCategory, categorySinkEdge_text, movieCategoryEdge_text});
            System.out.println(" ");
        }
    }

     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProblemModelingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProblemModelingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProblemModelingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProblemModelingForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProblemModelingForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_back1;
    private javax.swing.JButton bt_back2;
    private javax.swing.JButton bt_createGraph;
    private javax.swing.JButton bt_itemsAllocation;
    private javax.swing.JButton bt_loadTopCategoryNodes;
    private javax.swing.JButton bt_runMinCostFlow;
    private javax.swing.JComboBox cb_categoryPopularityMode;
    private javax.swing.JComboBox cb_maxAppearancesPerMovie;
    private javax.swing.JComboBox cb_modelOfCreatingPackages;
    private javax.swing.JComboBox cb_numOfCategories;
    private javax.swing.JComboBox cb_numOfItemsPerCategory;
    private javax.swing.JComboBox cb_numOfPackages;
    private javax.swing.JComboBox<String> cb_packageSize;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenu menu_about;
    private javax.swing.JMenuItem menu_exit;
    private javax.swing.JTable tb_categoryNodes;
    private javax.swing.JTable tb_movieNodes;
    private javax.swing.JTable tb_sinkNode;
    private javax.swing.JTable tb_sourceNode;
    private javax.swing.JTextField tx_runningMode;
    private javax.swing.JTextField tx_selectedUser;
    // End of variables declaration//GEN-END:variables
}
